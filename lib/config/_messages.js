"use strict";

// Generated by CoffeeScript 2.5.1
(function () {
  var i18n, messages;
  i18n = require('../i18n');
  messages = {
    dsc: {
      ambiguousProp: function ambiguousProp(args) {
        return "Ambiguous property ".concat(args.name, " values: ").concat(args.value1, " and ").concat(args.value2);
      },
      compilerError: function compilerError(args) {
        return "".concat(args.value);
      },
      duplicatedName: function duplicatedName(args) {
        return "Dulicated name: ".concat(args.value);
      },
      invalidExpression: function invalidExpression(args) {
        return "Invalid expression at position ".concat(args.position, ": ").concat(args.value);
      },
      invalidName: function invalidName(args) {
        return "Invalid name: ".concat(args.value);
      },
      invalidTagValue: function invalidTagValue(args) {
        return "Invalid tag value at position ".concat(index, ": ").concat(value);
      },
      invalidValue: function invalidValue(args) {
        return "Invalid value: ".concat(args.value);
      },
      invalidRegexp: function invalidRegexp(args) {
        return "Invalid regexp: ".concat(args.value, " (Error: ").concat(args.msg, ")");
      },
      keyAndNameHasDifferenValues: function keyAndNameHasDifferenValues(args) {
        return "Key (value: ".concat(args.value1, " and name (value: ").concat(value2, " have different values");
      },
      missingFile: function missingFile(args) {
        return "Missing file: ".concat(args.value);
      },
      missingProp: function missingProp(args) {
        return "Missing property: ".concat(args.value);
      },
      noSuchFile: function noSuchFile(args) {
        return "Optional file is missing: ".concat(args.value);
      },
      notApplicableForTheTypeProp: function notApplicableForTheTypeProp(args) {
        return "Property ".concat(args.nameValue, " is not applicable for type ").concat(args.typeValue);
      },
      reservedName: function reservedName(args) {
        return "Reserved name: ".concat(args.value);
      },
      unexpectedProp: function unexpectedProp(args) {
        return "Unexpected property: ".concat(args.value);
      },
      unknownAction: function unknownAction(args) {
        return "Unknown action: ".concat(args.value);
      },
      unknownDocument: function unknownDocument(args) {
        return "Unknown document: ".concat(args.value);
      },
      // differentiate items to fields and actions
      unknownItem: function unknownItem(args) {
        return "Unknown item at position ".concat(args.position, ": ").concat(args.value);
      },
      unknownState: function unknownState(args) {
        return "Unknown state: ".concat(args.value);
      },
      unknownType: function unknownType(args) {
        return "Unknown type: ".concat(args.value);
      },
      tooBig: function tooBig(args) {
        return "Too big: ".concat(args.value);
      },
      tooSmall: function tooSmall(args) {
        return "Too small: ".concat(args.value);
      },
      unmatchParenthesis: function unmatchParenthesis(args) {
        return "Unmatch parenthesis at position ".concat(args.position, ": ").concat(args.value);
      },
      // DSDocument
      fieldIsReadonly: function fieldIsReadonly(args) {
        return "Field is read-only: ".concat(args.value);
      }
    }
  }; // ----------------------------

  module.exports = function (result) {
    var res;
    res = i18n.link(result, messages);

    if (!result.isError) {
      return res;
    }
  };
}).call(void 0);
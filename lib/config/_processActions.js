"use strict";

// Generated by CoffeeScript 2.5.1
(function () {
  var Result, bitArray, compileTags, copyExtra, processActions, processFields, sortedMap;
  Result = require('../result');
  sortedMap = require('../sortedMap');
  bitArray = require('../bitArray');

  var _require = require('../tags');

  compileTags = _require.compile;
  copyExtra = require('./_copyExtra');
  processFields = require('./_processFields');

  processActions = function processActions(result, doc, config, noSystemItems) {
    var EMPTY;

    if (!(doc.$$src.hasOwnProperty('actions') || !noSystemItems)) {
      EMPTY = {
        $$list: [],
        $$tags: {}
      };
      EMPTY.$$tags.all = EMPTY.$$tags.none = new bitArray(EMPTY);
      EMPTY.$$tags.all.lock();
      return EMPTY; // processActions =
    }

    return result.context(Result.prop('actions'), function () {
      // processActions =
      var action, res, sortedMapOpts;
      sortedMapOpts = {
        index: true
      };

      if (!noSystemItems) {
        sortedMapOpts.before = [{
          // TODO: Think of replacement of 'value'
          name: 'create',
          tags: 'system'
        }, {
          name: 'retrieve',
          tags: 'system'
        }, {
          name: 'update',
          tags: 'system'
        }, {
          name: 'delete',
          tags: 'system'
        }, {
          name: 'restore',
          tags: 'system'
        }, {
          name: 'list',
          tags: 'system'
        }];
        sortedMapOpts.reservedName = ['create', 'retrieve', 'update', 'delete', 'restore', 'list'];
      }

      res = sortedMap(result, doc.$$src.actions || {}, sortedMapOpts);

      if (!result.isError) {
        action = void 0;
        result.context(function (path) {
          return Result.prop(action.name)(path);
        }, function () {
          var i, len, ref;
          ref = res.$$list;

          for (i = 0, len = ref.length; i < len; i++) {
            action = ref[i];

            if (!action.hasOwnProperty('$$src')) {
              continue;
            }

            if (action.$$src.hasOwnProperty('skipValidate')) {
              if (typeof action.$$src.skipValidate !== 'boolean') {
                result.context(Result.prop('skipValidate'), function () {
                  return result.error('validate.invalidValue', {
                    value: action.$$src.skipValidate
                  });
                });
              } else {
                if (action.$$src.skipValidate) {
                  action.skipValidate = true;
                }
              }
            }

            if (action.$$src.hasOwnProperty('static')) {
              if (typeof action.$$src["static"] !== 'boolean') {
                result.context(Result.prop('static'), function () {
                  return result.error('validate.invalidValue', {
                    value: action.$$src["static"]
                  });
                });
              } else {
                if (action.$$src["static"]) {
                  action["static"] = true;
                }
              }
            }

            if (action.$$src.hasOwnProperty('arguments')) {
              action.arguments = processFields(result, action, config, 'arguments', true);
            }

            if (action.$$src.hasOwnProperty('result')) {
              action.result = processFields(result, action, config, 'result', true); // result.context
            }
          }
        });
        copyExtra(result, res);
        compileTags(result, res);
        sortedMap.finish(result, res, {
          skipProps: ['tags', 'skipValidate', 'static']
        });

        if (!result.isError) {
          // processActions =
          return res;
        }
      }
    });
  }; // ----------------------------


  module.exports = processActions;
}).call(void 0);
"use strict";

// Generated by CoffeeScript 2.5.1
(function () {
  var Result, checkDocumentName, processActions, processDocs, processFields, processRefers, processStates, sortedMap;

  var _require = require('../utils');

  checkDocumentName = _require.checkDocumentName;
  Result = require('../result');
  sortedMap = require('../sortedMap');
  processFields = require('./_processFields');
  processActions = require('./_processActions');
  processStates = require('./_processStates');
  processRefers = require('./_processRefers');

  processDocs = function processDocs(result, config) {
    if (!config.$$src.hasOwnProperty('docs')) {
      result.error('dsc.missingProp', {
        value: 'docs'
      });
      return;
    }

    return result.context(Result.prop('docs'), function () {
      // processDocs =
      var doc, res;
      res = sortedMap(result, config.$$src.docs, {
        checkName: checkDocumentName
      });

      if (!result.isError) {
        doc = void 0;
        result.context(function (path) {
          return Result.item(doc.name)(path);
        }, function () {
          var i, len, ref;
          ref = res.$$list;

          for (i = 0, len = ref.length; i < len; i++) {
            doc = ref[i];
            result.isError = false; // rule: 'doc' is a default namespace

            if (doc.name.indexOf('.') === -1) {
              delete res[doc.name];
              doc.name = "doc.".concat(doc.name);
              res[doc.name] = doc;
            }

            doc.fields = processFields(result, doc, config);
            doc.actions = processActions(result, doc);

            if (!result.isError) {
              doc.states = processStates(result, doc, doc.fields, doc.actions); // result.context
            }
          }
        }); // rule: docs.$$list is sorted in alpabetical order of their names

        res.$$list.sort(function (left, right) {
          return left.name.localeCompare(right.name);
        });
        sortedMap.finish(result, res);

        if (!result.isError) {
          processRefers(result, res);

          if (!result.isError) {
            // processDocs = (result, config) ->
            config.docs = res;
          }
        }
      }
    });
  }; // ----------------------------


  module.exports = processDocs;
}).call(void 0);
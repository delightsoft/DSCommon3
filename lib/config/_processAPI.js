"use strict";

// Generated by CoffeeScript 2.5.1
(function () {
  var Result, checkDocumentName, compileTags, copyOptions, processAPI, processFields, sortedMap;

  var _require = require('../utils');

  checkDocumentName = _require.checkDocumentName;
  Result = require('../result');
  sortedMap = require('../sortedMap');
  processFields = require('./_processFields');
  copyOptions = require('./_copyOptions');

  var _require2 = require('../tags');

  compileTags = _require2.compile;

  processAPI = function processAPI(result, config) {
    if (!config.$$src.hasOwnProperty('api')) {
      return {};
    }

    return result.context(Result.prop('api'), function () {
      // processDocs =
      var api, res;
      res = sortedMap(result, config.$$src.api);

      if (!result.isError) {
        api = void 0;
        result.context(function (path) {
          return Result.item(api.name)(path);
        }, function () {
          var i, len, method, ref;
          ref = res.$$list;

          for (i = 0, len = ref.length; i < len; i++) {
            api = ref[i];

            if (!api.$$src) {
              continue;
            }

            if (!api.$$src.hasOwnProperty('methods')) {
              result.warn('missingProp', {
                value: 'methods'
              });
            } else {
              result.context(function (path) {
                return Result.prop('methods')(path);
              }, function () {});
              api.methods = sortedMap(result, api.$$src.methods);

              if (!result.isError) {
                method = void 0;
                result.context(function (path) {
                  return Result.item(method.name)(path);
                }, function () {
                  var j, k, len1, len2, prop, ref1, ref2;
                  ref1 = api.methods.$$list;

                  for (j = 0, len1 = ref1.length; j < len1; j++) {
                    method = ref1[j];

                    if (!method.$$src) {
                      continue;
                    }

                    ref2 = ['input', 'output'];

                    for (k = 0, len2 = ref2.length; k < len2; k++) {
                      prop = ref2[k];

                      if (!method.hasOwnProperty(prop)) {
                        method[prop] = {};
                      } else {
                        method[prop] = processFields(result, method, config, prop); // result.context
                      }
                    }
                  }
                });
                copyOptions(result, api.methods); // rule: api.methods.$$list is sorted in alphabetical order of their names

                api.methods.$$list.sort(function (left, right) {
                  return left.name.localeCompare(right.name);
                });
                compileTags(result, api.methods);
                sortedMap.finish(result, api.methods, {
                  skipProps: ['tags'] // result.context

                });
              }
            }
          }
        });
        copyOptions(result, res); // rule: api.$$list is sorted in alphabetical order of their names

        res.$$list.sort(function (left, right) {
          return left.name.localeCompare(right.name);
        });
        compileTags(result, res);
        sortedMap.finish(result, res, {
          skipProps: ['tags']
        });

        if (!result.isError) {
          if (!result.isError) {
            // processDocs = (result, config) ->
            config.api = res;
          }
        }
      }
    });
  }; // ----------------------------


  module.exports = processAPI;
}).call(void 0);
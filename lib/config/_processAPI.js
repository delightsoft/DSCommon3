"use strict";

// Generated by CoffeeScript 2.5.1
(function () {
  var Result, bitArray, checkAPIName, compileTags, copyExtra, processAPI, processFields, sortedMap;

  var _require = require('../utils');

  checkAPIName = _require.checkAPIName;
  Result = require('../result');
  sortedMap = require('../sortedMap');
  bitArray = require('../bitArray');
  processFields = require('./_processFields');
  copyExtra = require('./_copyExtra');

  var _require2 = require('../tags');

  compileTags = _require2.compile;

  processAPI = function processAPI(result, config, noSystemItems) {
    if (!config.$$src.api) {
      return;
    }

    return result.context(Result.prop('api'), function () {
      // processDocs =
      var api, res;
      res = sortedMap(result, config.$$src.api, {
        checkName: checkAPIName
      });

      if (!result.isError) {
        api = void 0;
        result.context(function (path) {
          return Result.prop(api.name)(path);
        }, function () {
          var i, len, ref, ref1;
          ref = res.$$list;

          for (i = 0, len = ref.length; i < len; i++) {
            api = ref[i];

            if (!((ref1 = api.$$src) != null ? ref1.hasOwnProperty('methods') : void 0)) {
              result.warn('missingProp', {
                value: 'methods'
              });
            } else {
              result.context(function (path) {
                return Result.prop('methods')(path);
              }, function () {
                var method;
                api.methods = sortedMap(result, api.$$src.methods);

                if (!result.isError) {
                  method = void 0;
                  result.context(function (path) {
                    return Result.prop(method.name)(path);
                  }, function () {
                    var j, k, len1, len2, prop, ref2, ref3, ref4;
                    ref2 = api.methods.$$list;

                    for (j = 0, len1 = ref2.length; j < len1; j++) {
                      method = ref2[j];
                      ref3 = ['arguments', 'result'];

                      for (k = 0, len2 = ref3.length; k < len2; k++) {
                        prop = ref3[k];

                        if (!((ref4 = method.$$src) != null ? ref4.hasOwnProperty(prop) : void 0)) {
                          method[prop] = {};
                        } else {
                          method[prop] = processFields(result, method, config, prop, true); // result.context
                        }
                      }
                    }
                  });
                  copyExtra(result, api.methods); // rule: api.methods.$$list is sorted in alphabetical order of their names

                  api.methods.$$list.sort(function (left, right) {
                    return left.name.localeCompare(right.name);
                  });
                  sortedMap.index(result, api.methods, {
                    mask: true
                  });
                  compileTags(result, api.methods);
                  sortedMap.finish(result, api.methods, {
                    skipProps: ['tags'] // result.context
                    // result.context

                  });
                }
              });
            }
          }
        });
        copyExtra(result, res); // rule: api.$$list is sorted in alphabetical order of their names

        res.$$list.sort(function (left, right) {
          return left.name.localeCompare(right.name);
        });
        sortedMap.index(result, res);

        if (result.isError) {
          return;
        }

        compileTags(result, res);

        if (result.isError) {
          return;
        }

        sortedMap.finish(result, res);

        if (result.isError) {
          return;
        }

        if (!result.isError) {
          // processDocs = (result, config) ->
          config.api = res;
        }
      }
    });
  }; // ----------------------------


  module.exports = processAPI;
}).call(void 0);
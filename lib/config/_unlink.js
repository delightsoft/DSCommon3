"use strict";

// Generated by CoffeeScript 2.5.1
(function () {
  var lightClone, unlink, unlinkField, unlinkFlatMap, unlinkMethods, unlinkSortedMap, unlinkTags, unlinkUDType;

  var _require = require('../utils');

  lightClone = _require.lightClone;

  unlinkSortedMap = function unlinkSortedMap(collection, process) {
    var item, newItem, res;
    res = {
      list: function () {
        var i, len, ref1, results;
        ref1 = collection.$$list;
        results = [];

        for (i = 0, len = ref1.length; i < len; i++) {
          item = ref1[i];
          newItem = lightClone(item);

          if (typeof process === "function") {
            process(newItem);
          }

          results.push(newItem);
        }

        return results;
      }()
    };

    if (collection.$$tags) {
      res.tags = unlinkTags(collection.$$tags);
    }

    return res; // unlinkSortedMap =
  };

  unlinkFlatMap = function unlinkFlatMap(collection, prop, process) {
    var res, _unlinkLevel;

    _unlinkLevel = function unlinkLevel(level) {
      var clone, i, item, len, results;
      results = [];

      for (i = 0, len = level.length; i < len; i++) {
        item = level[i];
        clone = lightClone(item);

        if (clone.hasOwnProperty(prop)) {
          clone[prop] = _unlinkLevel(clone[prop].$$list);
        }

        if (typeof process === "function") {
          process(clone);
        }

        results.push(clone);
      }

      return results;
    };

    res = {
      list: _unlinkLevel(collection.$$list)
    };

    if (collection.$$tags) {
      res.tags = unlinkTags(collection.$$tags);
    }

    return res; // unlinkFlatMap =
  };

  unlinkTags = function unlinkTags(tags) {
    var k, res, v;
    res = {};

    for (k in tags) {
      v = tags[k];

      if (k !== 'all') {
        res[k] = v._mask;
      }
    }

    return res; // unlinkTags =
  };

  unlinkField = function unlinkField(field) {
    var ref;

    if (field.hasOwnProperty('refers')) {
      field.refers = function () {
        var i, len, ref1, results;
        ref1 = field.refers;
        results = [];

        for (i = 0, len = ref1.length; i < len; i++) {
          ref = ref1[i];
          results.push(ref.name);
        }

        return results;
      }();
    }

    if (field.hasOwnProperty('enum')) {
      field["enum"] = unlinkSortedMap(field["enum"]);
    }

    delete field._validate;
  };

  unlinkUDType = function unlinkUDType(type) {
    var ref;

    if (type.hasOwnProperty('refers')) {
      type.refers = function () {
        var i, len, ref1, results;
        ref1 = type.refers;
        results = [];

        for (i = 0, len = ref1.length; i < len; i++) {
          ref = ref1[i];
          results.push(ref.name);
        }

        return results;
      }();
    }

    if (type.hasOwnProperty('enum')) {
      type["enum"] = unlinkSortedMap(type["enum"]);
    }
  };

  unlinkMethods = function unlinkMethods(methods) {
    var i, len, method, ref1, res, results;
    ref1 = methods.$$list;
    results = [];

    for (i = 0, len = ref1.length; i < len; i++) {
      method = ref1[i];
      res = lightClone(method);

      if (res.arguments.$$list.length > 0) {
        res.arguments = unlinkMap(method.arguments);
      }

      if (res.result.$$list.length > 0) {
        res.result = unlinkMap(method.result);
      }

      results.push(res);
    }

    return results;
  };

  unlink = function unlink(config) {
    var api, i, j, l, len, len1, len2, len3, len4, m, method, n, newConfig, newDoc, newState, newTran, ref1, ref2, ref3, ref4, ref5;
    newConfig = lightClone(config);

    if (!(config.docs.$$list.length > 0)) {
      delete newConfig.docs;
    } else {
      newConfig.docs = unlinkSortedMap(newConfig.docs);
      ref1 = newConfig.docs.list;

      for (i = 0, len = ref1.length; i < len; i++) {
        newDoc = ref1[i];
        newDoc.fields = unlinkFlatMap(newDoc.fields, 'fields', unlinkField);
        newDoc.actions = unlinkSortedMap(newDoc.actions);
        newDoc.states = unlinkSortedMap(newDoc.states);
        ref2 = newDoc.states.list;

        for (j = 0, len1 = ref2.length; j < len1; j++) {
          newState = ref2[j];
          newState.view = newState.view._mask;
          newState.update = newState.update._mask;
          newState.transitions = unlinkSortedMap(newState.transitions);
          ref3 = newState.transitions.list;

          for (l = 0, len2 = ref3.length; l < len2; l++) {
            newTran = ref3[l];
            newTran.next = newTran.next.name;
          }
        }
      }
    }

    if (!(newConfig.api.$$list.length > 0)) {
      delete newConfig.api;
    } else {
      newConfig.api = unlinkSortedMap(newConfig.api);
      ref4 = newConfig.api.list;

      for (m = 0, len3 = ref4.length; m < len3; m++) {
        api = ref4[m];

        if (!(api.methods.$$list.length > 0)) {
          delete api.methods;
        } else {
          if (!api.hasOwnProperty('methods')) {
            delete api.methods;
          } else {
            api.methods = unlinkSortedMap(api.methods);
            ref5 = api.methods.list;

            for (n = 0, len4 = ref5.length; n < len4; n++) {
              method = ref5[n];

              if (method.arguments.$$list.length > 0) {
                method.arguments = unlinkFlatMap(method.arguments, 'fields', unlinkField);
              }

              if (method.result.$$list.length > 0) {
                method.result = unlinkFlatMap(method.result, 'fields', unlinkField);
              }
            }
          }
        }
      }
    }

    return newConfig;
  }; // ----------------------------


  module.exports = unlink;
}).call(void 0);
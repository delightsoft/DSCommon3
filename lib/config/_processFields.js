"use strict";

// Generated by CoffeeScript 2.5.1
(function () {
  var Result, compileTags, compileType, copyExtra, flatMap, processFields, typeProps;
  Result = require('../result');
  flatMap = require('../flatMap');
  copyExtra = require('./_copyExtra');

  var _require = require('../types');

  compileType = _require.compile;
  typeProps = _require.compile._typeProps;

  var _require2 = require('../tags');

  compileTags = _require2.compile;

  processFields = function processFields(result, doc, config) {
    var fieldsProp = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'fields';

    if (!doc.$$src.hasOwnProperty(fieldsProp)) {
      result.error('dsc.missingProp', {
        value: fieldsProp
      });
      return;
    }

    return result.context(Result.prop(fieldsProp), function () {
      // processFields
      var _processLevel2, res;

      res = flatMap(result, doc.$$src[fieldsProp], 'fields', {
        index: true,
        mask: true
      });

      if (!result.isError) {
        _processLevel2 = function _processLevel(level) {
          var field;
          copyExtra(result, level);
          field = void 0;
          result.context(function (path) {
            return Result.item(field.name)(path);
          }, function () {
            var i, j, len, len1, prop, ref, udt, udtList, value;
            ref = level.$$list;

            for (i = 0, len = ref.length; i < len; i++) {
              field = ref[i];
              result.isError = false;
              compileType(result, field.$$src, field, {
                context: 'field'
              });

              if (field.$$src.hasOwnProperty('required')) {
                if (typeof (value = field.$$src.required) !== 'boolean') {
                  result.error(Result.prop('required'), 'dsc.invalidValue', {
                    value: value
                  });
                } else {
                  if (value) {
                    field.required = value;
                  }
                }
              }

              if (field.hasOwnProperty('udType') && config.udtypes !== 'failed') {
                if (!(config.udtypes && config.udtypes.hasOwnProperty(field.udType))) {
                  result.error('dsc.unknownType', {
                    value: field.udType
                  });
                } else {
                  udt = config.udtypes[field.udType];
                  field.type = udt.type;

                  for (j = 0, len1 = typeProps.length; j < len1; j++) {
                    prop = typeProps[j];

                    if (udt.hasOwnProperty(prop)) {
                      field[prop] = udt[prop];
                    }
                  }

                  udtList = [udt.name];

                  while (udt.hasOwnProperty('udType')) {
                    udt = config.udtypes[udt.udType];
                    udtList.push(udt.name);
                  }

                  field.udType = udtList;
                }
              }

              if (!result.isError) {
                if (field.hasOwnProperty('fields')) {
                  result.context(Result.prop('fields'), function () {
                    return _processLevel2(field.fields); // result.context
                    // _processLevel =
                  });
                }
              }
            }
          });
        };

        _processLevel2(res);

        compileTags(result, res);
        flatMap.finish(result, res, 'fields', {
          skipProps: ['tags', 'required', 'null']
        });

        if (!result.isError) {
          // result.context
          return res;
        }
      }
    });
  }; // ----------------------------


  module.exports = processFields;
}).call(void 0);
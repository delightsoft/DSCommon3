"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Generated by CoffeeScript 2.5.1
(function () {
  var $$applyUpdate, isResult;

  var _require = require('../../utils/_err');

  isResult = _require.isResult;

  $$applyUpdate = function $$applyUpdate(docModel) {
    var _processLevel;

    _processLevel = function processLevel(result, model, docLvl, docUpdateLvl, updateMask) {
      (function (res) {
        // (model, level, updateMask) ->
        var propName;
        propName = void 0;
        result.context(Result.prop(propName), function () {
          var field, propValue;

          for (propName in docUpdateLvl) {
            propValue = docUpdateLvl[propName];

            if (!model.fields.hasOwnProperty(propName)) {
              result('validate.unknownField', {
                value: propValue
              });
            } else {
              field = model.fields[propName];

              if (!updateMask.get(field.$$index)) {
                result.error('validate.unexpectedField', {
                  value: propValue
                });
              } else {
                if ((field.type === 'structure' || field.type === 'subtable') && _typeof(propValue) === 'object' && propValue !== null) {
                  _processLevel(result, field, docLvl[propName] || (docLvl[propName] = {}), propValue, updateMask);
                } else {
                  docLvl = propValue; // processLevel =
                }
              }
            }
          }
        });
      })(void 0);
    };

    return function (result, doc, docUpdate, options) {
      // $$applyUpdate = (docModel) ->
      var access, isNewResult, optName, optValue, updateMask;

      if (!isResult(result)) {
        isNewResult = true;
        options = doc;
        doc = result;
      }

      access = void 0;

      if (options !== void 0) {
        if (!(_typeof(options) === 'object' && options !== null && !Array.isArray(options))) {
          invalidArg('options', options);
        }

        for (optName in options) {
          optValue = options[optName];

          switch (optName) {
            case 'access':
              access = optValue;
              break;

            default:
              unknownOption(optName);
          }
        }
      }

      if (!access) {
        access = docModel.$$access(doc);
      }

      var _access = access;
      updateMask = _access.updateMask;

      _processLevel(result, docModel, doc, docUpdate(updateMask)); // (doc, options) ->


      if (isNewResult) {
        // (result, doc, options) ->
        result.throwIfError();
      }
    };
  }; // ----------------------------


  module.exports = $$applyUpdate;
}).call(void 0);
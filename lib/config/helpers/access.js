"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Generated by CoffeeScript 2.5.1
(function () {
  var $$accessBuilder, invalidArg, _modify;

  var _require = require('../../utils');

  invalidArg = _require.err.invalidArg;

  _modify = function modify(body) {
    var res;
    res = {
      view: this.view.clone(),
      update: this.update.clone(),
      required: this.required.clone()
    };

    if (this.access) {
      res.access = this.access.clone();
    }

    body(res);
    res.view.lock();
    res.update.lock();
    res.required.lock();

    if (this.access) {
      res.access.lock();
    }

    res.modify = _modify;
    return res;
  };

  $$accessBuilder = function $$accessBuilder(docDesc, fieldsProp, access, isDoc) {
    if (typeof access === 'function') {
      if (!isDoc) {
        return function (doc) {
          var res;

          if (!(doc === null || _typeof(doc) === 'object' && !Array.isArray(doc))) {
            invalidArg('doc', doc);
          }

          res = {
            doc: doc,
            view: docDesc[fieldsProp].$$tags.all.clone(),
            update: docDesc[fieldsProp].$$tags.all.clone(),
            required: docDesc[fieldsProp].$$tags.required.clone()
          };
          access.call(this, res);
          res.view.lock();
          res.update.lock();
          res.required.lock();
          delete res.doc;
          res.modify = _modify;
          return res; // (doc) ->
        };
      } else {
        return function (doc) {
          var res;

          if (!(doc === null || _typeof(doc) === 'object' && !Array.isArray(doc))) {
            invalidArg('doc', doc);
          }

          res = {
            doc: doc,
            view: docDesc[fieldsProp].$$tags.all.clone(),
            update: docDesc[fieldsProp].$$tags.all.clone(),
            required: docDesc[fieldsProp].$$tags.required.clone(),
            actions: docDesc.actions.$$tags.all.clone()
          };
          access.call(this, res);
          res.view.add('#system', {
            strict: false
          }).remove('options', {
            strict: false
          }).lock();
          res.update = res.update ? (res.update = res.update.remove('#system+#computed', {
            strict: false
          }), docDesc.actions["delete"] && res.actions.get(docDesc.actions["delete"].$$index) ? res.update = res.update.add('deleted') : void 0, res.update.lock()) : docDesc[fieldsProp].$$calc('(#all-#system-#computed),deleted', {
            // в тестах может не быть системных действий
            strict: false
          });
          res.view.lock();
          res.update.lock();
          res.required.lock();
          res.actions.lock();
          delete res.doc;
          res.modify = _modify;
          return res; // (doc) ->
        };
      }
    } else {
      return function () {
        var allAccess;
        allAccess = {
          view: docDesc[fieldsProp].$$calc('#all-options', {
            strict: false
          }),
          update: docDesc[fieldsProp].$$calc('(#all-#system-#computed),deleted', {
            strict: false
          }),
          required: docDesc[fieldsProp].$$tags.required
        };

        if (isDoc) {
          allAccess.actions = docDesc.actions.$$tags.all;
        }

        allAccess.modify = _modify;
        return function (doc) {
          if (!(doc === null || _typeof(doc) === 'object' && !Array.isArray(doc))) {
            invalidArg('doc', doc);
          }

          return allAccess;
        };
      }();
    }
  }; // ----------------------------


  module.exports = $$accessBuilder;
}).call(void 0);
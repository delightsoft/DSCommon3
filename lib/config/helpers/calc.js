"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Generated by CoffeeScript 2.5.1
(function () {
  var $$calcBuilder, Result, calc;
  Result = require('../../result');
  calc = require('../../tags/_calc');

  $$calcBuilder = function $$calcBuilder(collection) {
    var $$calc, buildCalc, cache;
    cache = Object.create(null);

    buildCalc = function buildCalc(useCache) {
      return function (result) {
        var expr, exprArray, localResult, options, r, s;

        if (!(_typeof(result) === 'object' && result !== null && result.hasOwnProperty('isError'))) {
          s = 0;
          options = expr;
          expr = result;
          localResult = true;
          result = new Result();
        } else {
          s = 1;
        }

        options = arguments[arguments.length - 1];

        if (_typeof(options) === 'object') {
          if (arguments.length === 1 + s) {
            return collection.$$tags.none;
          } else if (arguments.length === 2 + s) {
            expr = arguments[s];

            if (typeof expr !== 'string') {
              invalidArg('expr', exprArray);
            }
          } else {
            exprArray = Array.prototype.slice.call(arguments, s, arguments.length - 1);

            if (!exprArray.every(v(function () {
              return typeof v === 'string';
            }))) {
              invalidArg('expr', exprArray);
            }

            expr = exprArray.join(',');
          }

          if (!(options !== null && !Array.isArray(options))) {
            invalidArg('options', options);
          }
        } else {
          options = void 0;

          if (arguments.length === s) {
            return collection.$$tags.none;
          } else if (arguments.length === 1 + s) {
            expr = arguments[s];

            if (typeof expr !== 'string') {
              invalidArg('expr', exprArray);
            }
          } else {
            exprArray = Array.prototype.slice.call(arguments, s);

            if (!exprArray.every(v(function () {
              return typeof v === 'string';
            }))) {
              invalidArg('expr', exprArray);
            }

            expr = exprArray.join(',');
          }
        }

        if (useCache) {
          if (hasOwnProperty.call(cache, expr)) {
            return cache[expr];
          }

          r = cache[expr] = calc(result, collection, expr, options);
          r.lock();
        } else {
          r = calc(result, collection, expr, options);
        }

        if (localResult) {
          result.throwIfError();
        }

        return r; // (useCache) ->
      };
    };

    $$calc = buildCalc(true);
    $$calc.noCache = buildCalc(false);
    return $$calc; // (fields) ->
  }; // ----------------------------


  module.exports = $$calcBuilder;
}).call(void 0);
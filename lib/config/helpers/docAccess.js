"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Generated by CoffeeScript 2.5.1
(function () {
  var $$docAccessBuilder, BitArray, invalidArg;
  BitArray = require('../../bitArray');

  var _require = require('../../utils');

  invalidArg = _require.err.invalidArg;

  $$docAccessBuilder = function $$docAccessBuilder(docDesc, access, rights) {
    if (!rights) {
      return function (doc, user) {
        if (!(doc === null || _typeof(doc) === 'object' && !Array.isArray(doc))) {
          invalidArg('doc', doc);
        }

        if (!(user === null || _typeof(user) === 'object' && !Array.isArray(user))) {
          invalidArg('user', user);
        }

        return access.call(docDesc, doc, user); // (doc, user) ->
      };
    } else {
      return function (doc, user) {
        var actionsExceedFullRights, docAccess, docRights, error, relationsMissingInViewAndUpdate, updateExceedFullRights, viewExceedFullRights;

        if (!(doc === null || _typeof(doc) === 'object' && !Array.isArray(doc))) {
          invalidArg('doc', doc);
        }

        if (!(user === null || _typeof(user) === 'object' && !Array.isArray(user))) {
          invalidArg('user', user);
        }

        docAccess = access.call(docDesc, doc, user);
        docRights = {
          doc: doc,
          user: user,
          docDesc: docDesc,
          view: new BitArray(docDesc.fields).set('#system-options', {
            strict: false
          }),
          update: new BitArray(docDesc.fields),
          fullFields: new BitArray(docDesc.fields),
          relations: new BitArray(docDesc.fields),
          actions: new BitArray(docDesc.actions),
          fullActions: new BitArray(docDesc.actions)
        };
        rights(docRights);
        docRights.view.only('#all-options', {
          strict: false
        }).add('id').lock();
        docRights.update.subtract('#system', {
          strict: false
        }).lock();
        docRights.fullFields.add('id').lock();
        docRights.relations.lock();
        docRights.actions.lock();
        docRights.fullActions.lock();
        viewExceedFullRights = docRights.fullFields.and(docRights.view);

        if (!viewExceedFullRights.isEmpty()) {
          (error || (error = [])).push("Doc '".concat(docDesc.name, "': view rights exceeds full rights: ").concat(viewExceedFullRights.list.map(v(function () {
            return v.fullname || v.name;
          })).join(', ')));
        }

        updateExceedFullRights = docRights.fullFields.and(docRights.update);

        if (!updateExceedFullRights.isEmpty()) {
          (error || (error = [])).push("Doc '".concat(docDesc.name, "': update rights exceeds full rights: ").concat(updateExceedFullRights.list.map(v(function () {
            return v.fullname || v.name;
          })).join(', ')));
        }

        actionsExceedFullRights = docRights.fullActions.and(docRights.actions);

        if (!actionsExceedFullRights.isEmpty()) {
          (error || (error = [])).push("Doc '".concat(docDesc.name, "': actions rights exceeds full rights: ").concat(actionsExceedFullRights.list.map(v(function () {
            return v.name;
          })).join(', ')));
        }

        relationsMissingInViewAndUpdate = docRights.relations.subtract(docRights.view).subtract(docRights.update);

        if (!relationsMissingInViewAndUpdate.isEmpty()) {
          (error || (error = [])).push("Doc '".concat(docDesc.name, "': relations missing in view and update: ").concat(relationsMissingInViewAndUpdate.list.map(v(function () {
            return v.fullname || v.name;
          })).join(', ')));
        }

        if (error) {
          throw new Error(error.join('/n'));
        }

        return docAccess.modify(function (_ref) {
          var view = _ref.view,
              update = _ref.update,
              actions = _ref.actions;
          // (doc, user) ->
          view.and(docRights.view.or(docRights.update));
          update.and(docRights.update);
          actions.and(docRights.actions); // (view, update, actions) ->
        });
      };
    }
  }; // ----------------------------


  module.exports = $$docAccessBuilder;
}).call(void 0);
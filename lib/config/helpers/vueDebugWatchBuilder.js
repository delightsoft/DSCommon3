"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Generated by CoffeeScript 2.5.1
(function () {
  var $$vueDebugWatchBuilderBuilder, Result, invalidArg, isObject, isResult, tooManyArgs;
  Result = require('../../result');

  var _require = require('../../utils/_err');

  invalidArg = _require.invalidArg;
  tooManyArgs = _require.tooManyArgs;
  isResult = _require.isResult;

  isObject = function isObject(v) {
    return _typeof(v) === 'object' && v !== null && !Array.isArray(v);
  };

  $$vueDebugWatchBuilderBuilder = function $$vueDebugWatchBuilderBuilder(fieldsDesc) {
    var _buildLevel;

    _buildLevel = function buildLevel(result, levelDesc, fields) {
      var checks, name;
      name = checks = void 0;
      result.context(function (path) {
        return Result.prop(name)(path);
      }, function () {
        var fieldDesc;
        return checks = function () {
          var j, len, ref, results;
          ref = levelDesc.$$list;
          results = [];

          for (j = 0, len = ref.length; j < len; j++) {
            fieldDesc = ref[j];

            if (!~['structure', 'subtable'].indexOf(fieldDesc.type)) {
              continue;
            }

            name = fieldDesc.name;
            results.push(function (fieldDesc, name) {
              var check, prevArr, prevValue, row;

              if (fieldDesc.type === 'structure') {
                if (isObject(prevValue = fields[name])) {
                  check = _buildLevel(result, fieldDesc.fields, prevValue);
                } else {
                  if (check) {
                    result.warn(Result.prop(name), 'missing', {
                      value: prevValue
                    });
                  }
                }

                return function (result, newFields) {
                  var v;
                  v = newFields[name];
                  result.context(Result.prop(name), function () {
                    if (check && prevValue === v) {
                      check(result, v);
                    } else if (isObject(v)) {
                      result.warn(check ? 'changed' : 'added');
                      check = _buildLevel(result, fieldDesc.fields, v);
                    } else {
                      if (check) {
                        result.warn('removed', {
                          value: v
                        });
                      }

                      check = void 0;
                    }

                    prevValue = newFields[name];
                  });
                };
              } else {
                prevArr = fields[name];

                if (Array.isArray(fields[name])) {
                  check = function () {
                    var k, len1, ref1, results1;
                    ref1 = fields[name];
                    results1 = [];

                    for (k = 0, len1 = ref1.length; k < len1; k++) {
                      row = ref1[k];
                      results1.push(_buildLevel(result, fieldDesc.fields, row));
                    }

                    return results1;
                  }();

                  prevValue = fields[name].slice();
                } else {
                  if (check) {
                    result.warn(Result.prop(name), 'missing', {
                      value: prevValue
                    });
                  }
                }

                return function (result, newFields) {
                  var i;

                  if (!check) {
                    if (Array.isArray(fields[name])) {
                      check = function () {
                        var k, len1, ref1, results1;
                        ref1 = fields[name];
                        results1 = [];

                        for (k = 0, len1 = ref1.length; k < len1; k++) {
                          row = ref1[k];
                          results1.push(_buildLevel(result, fieldDesc.fields, row));
                        }

                        return results1;
                      }();

                      prevValue = newFields[name].slice();
                      prevArr = newFields[name];
                      result.warn('added');
                    }
                  } else if (!Array.isArray(newFields[name])) {
                    check = void 0;
                    result.warn('removed', {
                      value: newFields[name]
                    });
                  } else if (prevArr !== newFields[name]) {
                    result.warn(Result.prop(name), 'changed');

                    check = function () {
                      var k, len1, ref1, results1;
                      ref1 = fields[name];
                      results1 = [];

                      for (k = 0, len1 = ref1.length; k < len1; k++) {
                        row = ref1[k];
                        results1.push(_buildLevel(result, fieldDesc.fields, row));
                      }

                      return results1;
                    }();

                    prevValue = fields[name].slice();
                    prevArr = fields[name];
                  } else {
                    i = void 0;
                    result.context(function (path) {
                      return Result.index(i, Result.prop(name))(path);
                    }, function () {
                      var k, l, len1, ref1, ref2, ref3, results1;
                      ref1 = newFields[name];

                      for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
                        row = ref1[i];

                        if (i >= prevValue.length) {
                          result.warn('added');
                          check.push(_buildLevel(result, fieldDesc.fields, row));
                        } else if (prevValue[i] !== row) {
                          result.warn('changed');
                          check[i] = _buildLevel(result, fieldDesc.fields, row);
                        } else {
                          check[i](result, row);
                        }
                      }

                      if (i < prevValue.length) {
                        results1 = [];

                        for (i = l = ref2 = i, ref3 = prevValue.length; ref2 <= ref3 ? l < ref3 : l > ref3; i = ref2 <= ref3 ? ++l : --l) {
                          results1.push(result.warn('removed'));
                        }

                        return results1;
                      }
                    });
                    prevValue = newFields[name].slice();
                    prevArr = newFields[name];
                    check.length = prevValue.length;
                  }
                };
              }
            }(fieldDesc, name));
          }

          return results;
        }();
      });
      return function (result, newFields) {
        // (result, desc, fields) ->
        var check, j, len;

        for (j = 0, len = checks.length; j < len; j++) {
          check = checks[j];
          check(result, newFields);
        }
      };
    };

    return function (propName) {
      var check;

      if (typeof propName !== 'string') {
        invalidArg('propName', propName);
      }

      if (!(arguments.length <= 2)) {
        tooManyArgs();
      }

      check = void 0;
      return function (result, value) {
        var newResult; // todo: check value totally changed

        if (!isResult(result)) {
          value = result;
          newResult = true;
          result = new Result();
        }

        result.context(Result.prop(propName), function () {
          var j, len, ref, row;

          if (!check) {
            result.context(Result.prop(propName), function () {});
            check = _buildLevel(result, fieldsDesc, value);
          } else {
            check(result, value);

            if (newResult) {
              ref = result.messages; // (result, value) ->

              for (j = 0, len = ref.length; j < len; j++) {
                row = ref[j];
                console.warn("".concat(row.path, ": ").concat(message));
              }
            }
          }
        });
      };
    };
  }; // ----------------------------


  module.exports = $$vueDebugWatchBuilderBuilder;
}).call(void 0);
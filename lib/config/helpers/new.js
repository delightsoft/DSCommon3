"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Generated by CoffeeScript 2.5.1
(function () {
  var _$$newBuilder, defaultInit, invalidArg, unknownOption;

  var _require = require('../../utils/_err');

  invalidArg = _require.invalidArg;
  unknownOption = _require.unknownOption;
  defaultInit = {
    string: '',
    text: '',
    "boolean": false,
    integer: 0,
    "double": 0
  }; //  decimal: '0'
  //  time:
  //  date:
  //  dateonly:
  //  timestamp:
  //  json:
  //  blob:
  //  uuid:
  //  enum:

  _$$newBuilder = function $$newBuilder(fields) {
    var field, i, len, newFuncs, ref;
    newFuncs = [];
    ref = fields.$$list;

    for (i = 0, len = ref.length; i < len; i++) {
      field = ref[i];

      (function () {
        var init, name;
        name = field.name;
        init = void 0;

        if (field.type === 'structure') {
          init = _$$newBuilder(field.fields);
        } else if (field.type === 'subtable') {
          if (field.required) {
            (function () {
              var $$new;
              $$new = field.fields.$$new;
              return init = function init(options) {
                return [$$new(options)];
              };
            })();
          } else {
            init = [];
          }
        } else if (field.hasOwnProperty('init')) {
          init = field.init;
        } else if (field["null"]) {
          init = null;
        } else if (defaultInit.hasOwnProperty(field.type)) {
          init = defaultInit[field.type];
        } else if (field.type === 'enum') {
          init = field["enum"].$$list[0].name;
        } else {
          init = null;
        }

        if (typeof init === 'function') {
          return newFuncs.push(function (res, options) {
            res[name] = init(options);
          });
        } else {
          return newFuncs.push(function (res) {
            res[name] = init;
          });
        }
      })();
    }

    return function (options) {
      var edit, optName, optValue, res;
      edit = false;

      if (options !== void 0) {
        if (!(_typeof(options) === 'object' && options !== null && !Array.isArray(options))) {
          invalidArg('options', options);
        }

        for (optName in options) {
          optValue = options[optName];

          switch (optName) {
            case 'edit':
              edit = !!optValue;
              break;

            default:
              unknownOption(optName);
          }
        }
      }

      res = {};
      newFuncs.forEach(function (f) {
        f(res, options);
      });

      if (edit) {
        res.$$touched = {};
      }

      return res; // () ->
    };
  }; // ----------------------------


  module.exports = _$$newBuilder;
}).call(void 0);
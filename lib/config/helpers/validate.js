"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Generated by CoffeeScript 2.5.1
(function () {
  var $$validateBuilder, Result, unknownOption, validateStructure;
  Result = require('../../result');

  var _require = require('../../utils/_err');

  unknownOption = _require.unknownOption;

  var _require2 = require('../../validate');

  validateStructure = _require2.structure;

  $$validateBuilder = function $$validateBuilder(type, fieldsProp, docLevelValidate) {
    var validate;
    validate = type["_".concat(fieldsProp, "Validate")] = validateStructure(type, fieldsProp);
    return function (result, fields, options) {
      var goodForAction, localResult, oldSave, optName, optValue, opts, save;
      opts = {
        mask: void 0,
        requiredMask: void 0,
        strict: true,
        beforeAction: false,
        beforeSave: false
      };

      if (options !== void 0) {
        if (!(_typeof(options) === 'object' && options !== null && !Array.isArray(options))) {
          invalidArg('options', options);
        }

        for (optName in options) {
          optValue = options[optName];

          switch (optName) {
            case 'mask':
              opts.mask = optValue;
              break;

            case 'required':
              opts.requiredMask = optValue;
              break;

            case 'strict':
              opts.strict = optValue;
              break;

            case 'beforeSave':
              opts.beforeSave = optValue;
              break;

            case 'beforeAction':
              opts.beforeAction = optValue;
              break;

            default:
              unknownOption(optName);
          }
        }
      }

      save = true;
      goodForAction = opts.beforeAction;
      opts.result = localResult = Object.create(result); // inherit given result object, to intercept it's 'error' method calls

      localResult.error = function () {
        // перехватываем сообщения об ошибках
        var msg;
        msg = Result.prototype.error.apply(localResult, arguments);

        if (msg.type === 'error') {
          goodForAction = false;

          if (msg.code !== 'validate.requiredField') {
            // localResult.error = () ->
            save = false;
          }
        }
      };

      validate.call(opts, fields, void 0, fields, opts.beforeSave && opts.beforeAction ? void 0 : fields.$$touched);
      oldSave = save;

      if (goodForAction && opts.beforeAction && typeof docLevelValidate === 'function') {
        docLevelValidate.call(opts, localResult, fields);

        if (localResult.isError) {
          goodForAction = false;
        }
      }

      return {
        save: oldSave,
        goodForAction: goodForAction
      };
    };
  }; // ----------------------------


  module.exports = $$validateBuilder;
}).call(void 0);
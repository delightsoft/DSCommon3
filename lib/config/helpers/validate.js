"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Generated by CoffeeScript 2.5.1
(function () {
  var $$validateBuilder, Result, unknownOption, validateStructure;
  Result = require('../../result');

  var _require = require('../../utils/_err');

  unknownOption = _require.unknownOption;

  var _require2 = require('../../validate');

  validateStructure = _require2.structure;

  $$validateBuilder = function $$validateBuilder(type, fieldsProp, docLevelValidate) {
    var validate;
    validate = type["_".concat(fieldsProp, "Validate")] = validateStructure(type, fieldsProp);
    return function (result, fields, options) {
      var beforeAction, goodForAction, localResult, mask, oldSave, optName, optValue, required, save, strict;
      mask = void 0;
      required = void 0;
      strict = true;
      beforeAction = false;

      if (options !== void 0) {
        if (!(_typeof(options) === 'object' && options !== null && !Array.isArray(options))) {
          invalidArg('options', options);
        }

        for (optName in options) {
          optValue = options[optName];

          switch (optName) {
            case 'mask':
              mask = optValue;
              break;

            case 'required':
              required = optValue;
              break;

            case 'strict':
              strict = optValue;
              break;

            case 'beforeAction':
              beforeAction = optValue;
              break;

            default:
              unknownOption(optName);
          }
        }
      }

      save = true;
      goodForAction = beforeAction;
      localResult = Object.create(result);

      localResult.error = function () {
        // перехватываем сообщения об ошибках
        var msg;
        msg = Result.prototype.error.apply(localResult, arguments);

        if (msg.type === 'error') {
          goodForAction = false;

          if (msg.code !== 'validate.requiredField') {
            // localResult.error = () ->
            save = false;
          }
        }
      };

      validate(localResult, fields, void 0, mask, required, fields.$$touched, strict, beforeAction);
      oldSave = save;

      if (goodForAction && beforeAction && typeof docLevelValidate === 'function') {
        docLevelValidate(localResult, fields); // TODO: processs results

        if (localResult.isError) {
          goodForAction = false;
        }
      }

      return {
        save: oldSave,
        goodForAction: goodForAction
      };
    };
  }; // ----------------------------


  module.exports = $$validateBuilder;
}).call(void 0);
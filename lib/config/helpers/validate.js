"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Generated by CoffeeScript 2.5.1
(function () {
  var $$validateBuilder, Result, validateStructure;
  Result = require('../../result');

  var _require = require('../../validate');

  validateStructure = _require.structure;

  $$validateBuilder = function $$validateBuilder(type, fieldsProp, access, businessValidate) {
    var validate;
    validate = type["".concat(fieldsProp, "Validate")] = validateStructure(type);
    return function (result, fields, options) {
      var localResult, oldSave, r, save, submit;
      localResult = Object.create(result);
      save = true;
      submit = true;

      localResult.error = function () {
        // перехватываем сообщения об ошибках
        var msg;
        msg = Result.prototype.error.apply(result, arguments);

        if (msg.type === 'error') {
          submit = false;

          if (msg.code !== 'validate.requiredField') {
            // localResult.error = () ->
            save = false;
          }
        }
      };

      r = access.call(this, fields);
      validate(localResult, fields, r.view, r.required, fields.$$touched, _typeof(options) === 'object' && options !== null && options.strict);
      oldSave = save;

      if (submit && typeof businessValidate === 'function') {
        businessValidate(localResult, fields);
      }

      return {
        save: oldSave,
        submit: submit
      };
    };
  }; // ----------------------------


  module.exports = $$validateBuilder;
}).call(void 0);
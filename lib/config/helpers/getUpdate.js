"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Generated by CoffeeScript 2.5.1
(function () {
  var $$getUpdate;

  $$getUpdate = function $$getUpdate(docModel) {
    var _processLevel;

    _processLevel = function processLevel(model, level, updateMask) {
      return function (res) {
        // (model, level, updateMask) ->
        model.fields.$$list.forEach(function (field) {
          if (level.hasOwnProperty(field.name) && updateMask.get(field.$$index)) {
            return (res || (res = {}))[field.name] = field.type === 'structure' || field.type === 'subtable' ? _processLevel(field, level[field.name], updateMask) : level[field.name];
          }
        });
        return res; // do (res = undefined) ->
      }(void 0);
    };

    return function (doc, options) {
      // $$getUpdate = (docModel) ->
      var access, optName, optValue, updateMask;
      access = void 0;

      if (options !== void 0) {
        if (!(_typeof(options) === 'object' && options !== null && !Array.isArray(options))) {
          invalidArg('options', options);
        }

        for (optName in options) {
          optValue = options[optName];

          switch (optName) {
            case 'access':
              access = optValue;
              break;

            default:
              unknownOption(optName);
          }
        }
      }

      if (!access) {
        access = docModel.$$access(doc);
      }

      var _access = access;
      updateMask = _access.updateMask;
      return _processLevel(docModel, doc, updateMask); // (doc, options) ->
    };
  }; // ----------------------------


  module.exports = $$getUpdate;
}).call(void 0);
"use strict";

// Generated by CoffeeScript 2.5.1
(function () {
  var $$editValidatorBuilderBuilder, Result;
  Result = require('../../result');

  $$editValidatorBuilderBuilder = function $$editValidatorBuilderBuilder(type, fieldsProp, access, businessValidate) {
    return function () {
      var _this = this;

      var prevBusinessResult, prevModel;
      prevModel = void 0;
      prevBusinessResult = void 0;
      return function (fields) {
        var localResult, messages, oldSave, r, save, submit, validate;

        if (fields !== prevModel) {
          prevBusinessResult = void 0;
        }

        validate = type["".concat(fieldsProp, "Validate")];
        messages = {};
        r = access.call(_this, fields);
        localResult = new Result();
        save = true;
        submit = true;

        localResult.error = function () {
          // перехватываем сообщения об ошибках
          var msg;
          msg = Result.prototype.error.apply(this, arguments);

          if (msg.type === 'error') {
            submit = false;

            if (msg.code !== 'validate.requiredField') {
              // localResult.error = () ->
              save = false;
            }
          }
        };

        validate(localResult, fields, r.view, r.required, fields.$$touched);
        oldSave = save;

        if (localResult.isError) {
          if (prevBusinessResult) {
            prevBusinessResult.messages.forEach(function (msg) {
              var path;

              if (path = msg.path) {
                !messages[path] || msg.type === 'error' && messages[path].type !== 'error' ? messages[path] = msg : void 0;
              } else {
                (messages[''] || (messages[''] = [])).push(msg);
              }
            });
          }

          localResult.messages.forEach(function (msg) {
            var path;

            if (path = msg.path) {
              !messages[path] || msg.type === 'error' && messages[path].type !== 'error' ? messages[path] = msg : void 0;
            } else {
              (messages[''] || (messages[''] = [])).push(msg);
            }
          });
        } else {
          if (typeof businessValidate === 'function') {
            localResult.messages.length = 0;
            businessValidate(localResult, fields);
            localResult.messages.forEach(function (msg) {
              var path;

              if (path = msg.path) {
                !messages[path] || msg.type === 'error' && messages[path].type !== 'error' ? messages[path] = msg : void 0;
              } else {
                (messages[''] || (messages[''] = [])).push(msg);
              }
            });
            prevBusinessResult = localResult;
          }
        }

        return {
          save: oldSave,
          submit: submit,
          messages: messages // (fields) ->  # ->

        };
      };
    };
  }; // ----------------------------


  module.exports = $$editValidatorBuilderBuilder;
}).call(void 0);
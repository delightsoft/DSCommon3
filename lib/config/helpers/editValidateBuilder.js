"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Generated by CoffeeScript 2.5.1
(function () {
  var $$editValidatorBuilderBuilder, Result, invalidArg, unknownOption;
  Result = require('../../result');

  var _require = require('../../utils/_err');

  invalidArg = _require.invalidArg;
  unknownOption = _require.unknownOption;

  $$editValidatorBuilderBuilder = function $$editValidatorBuilderBuilder(type, fieldsProp, access, businessValidate) {
    return function () {
      var _this = this;

      var prevBusinessResult, prevModel;
      prevModel = void 0;
      prevBusinessResult = void 0;
      return function (fields, options) {
        var beforeSubmit, localResult, messages, oldSave, optName, optValue, r, save, submit, validate;
        beforeSubmit = false;

        if (options !== void 0) {
          if (!(_typeof(options) === 'object' && options !== null && !Array.isArray(options))) {
            invalidArg('options', options);
          }

          for (optName in options) {
            optValue = options[optName];

            switch (optName) {
              case 'beforeSubmit':
                beforeSubmit = !!optValue;
                break;

              default:
                unknownOption(optName);
            }
          }
        }

        if (fields !== prevModel) {
          prevBusinessResult = void 0;
          prevModel = fields;
        }

        validate = type["".concat(fieldsProp, "Validate")];
        messages = {};
        r = access.call(_this, fields);
        localResult = new Result();
        save = true;
        submit = true;

        localResult.error = function () {
          // перехватываем сообщения об ошибках
          var msg;
          msg = Result.prototype.error.apply(this, arguments);

          if (msg.type === 'error') {
            submit = false;

            if (msg.code !== 'validate.requiredField') {
              // localResult.error = () ->
              save = false;
            }
          }
        };

        validate(localResult, fields, r.view, r.required, beforeSubmit ? fields.$$touched : void 0);
        oldSave = save;

        if (localResult.isError) {
          if (prevBusinessResult) {
            prevBusinessResult.messages.forEach(function (msg) {
              var path;

              if (path = msg.path) {
                !messages[path] || msg.type === 'error' && messages[path].type !== 'error' ? messages[path] = msg : void 0;
              } else {
                (messages[''] || (messages[''] = [])).push(msg);
              }
            });
          }

          localResult.messages.forEach(function (msg) {
            var path;

            if (path = msg.path) {
              !messages[path] || msg.type === 'error' && messages[path].type !== 'error' ? messages[path] = msg : void 0;
            } else {
              (messages[''] || (messages[''] = [])).push(msg);
            }
          });
        } else if (!beforeSubmit) {
          if (typeof businessValidate === 'function') {
            localResult.messages.length = 0;
            businessValidate(localResult, fields);
            localResult.messages.forEach(function (msg) {
              var path;

              if (path = msg.path) {
                !messages[path] || msg.type === 'error' && messages[path].type !== 'error' ? messages[path] = msg : void 0;
              } else {
                (messages[''] || (messages[''] = [])).push(msg);
              }
            });
            prevBusinessResult = localResult;
          }
        }

        return {
          save: oldSave,
          submit: submit,
          messages: messages // (fields) ->  # ->

        };
      };
    };
  }; // ----------------------------


  module.exports = $$editValidatorBuilderBuilder;
}).call(void 0);
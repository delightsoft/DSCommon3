"use strict";

// Generated by CoffeeScript 2.5.1
(function () {
  var $$vueDebugWatchBuilderBuilder, Result, invalidArg, isResult, tooManyArgs;
  Result = require('../../result');

  var _require = require('./utils/_err');

  invalidArg = _require.invalidArg;
  tooManyArgs = _require.tooManyArgs;
  isResult = _require.isResult;

  $$vueDebugWatchBuilderBuilder = function $$vueDebugWatchBuilderBuilder(fieldsDesc) {
    var _buildLevel;

    _buildLevel = function buildLevel(result, desc, fields) {
      var checks, fieldDesc;
      return checks = function () {
        var j, len, results;
        results = [];

        for (j = 0, len = fieldsDescLevel.length; j < len; j++) {
          fieldDesc = fieldsDescLevel[j];

          if (~['structure', 'subtable'].indexOf(fieldDesc.type)) {
            results.push(function (fieldDesc) {
              var check, k, len1, localPath, prevValue, ref, row;
              localPath = result.pathFunc();

              if (fieldDesc.type === 'structure') {
                prevValue = fields[name];

                (function (result, newFields) {
                  if (prevValue !== newFields[fieldDesc.name]) {
                    result.warn(function () {
                      return localPath;
                    }, 'changed');
                  }

                  prevValue = newFields[fieldDesc.name];
                });
              } else {
                prevValue = fields[name].slice();
                ref = fields[name];

                for (k = 0, len1 = ref.length; k < len1; k++) {
                  row = ref[k];
                  check = _buildLevel(result, fieldDesc, row);
                }

                (function (result, newFields) {
                  var i;
                  i = void 0;
                  result.context(function (path) {
                    return Result.index(Result.prop(localPath), i)(path);
                  }, function () {
                    var l, len2, m, ref1, ref2, ref3, results1;
                    ref1 = newFields[fieldDesc.name];

                    for (i = l = 0, len2 = ref1.length; l < len2; i = ++l) {
                      row = ref1[i];

                      if (i > prevValue.lenght) {
                        result.warn('added');
                        check.push(_buildLevel(result, fieldDesc, row));
                      } else if (prevValue[i] !== row) {
                        result.warn('changed');
                        check[i] = _buildLevel(result, fieldDesc, row);
                      } else {
                        check[i](result, row);
                      }
                    }

                    results1 = [];

                    for (i = m = ref2 = i, ref3 = prevValue.length; ref2 <= ref3 ? m < ref3 : m > ref3; i = ref2 <= ref3 ? ++m : --m) {
                      results1.push(result.warn('removed'));
                    }

                    return results1;
                  });
                  prevValue = newFields[fieldDesc.name].slice();
                  return check.length = prevValue.length;
                });
              }

              return function (result, newFields) {
                // (result, desc, fields) ->
                var l, len2;

                for (l = 0, len2 = checks.length; l < len2; l++) {
                  check = checks[l];
                  check(result, newFields);
                }
              };
            }(fieldDesc));
          }
        }

        return results;
      }();
    };

    return function (propName) {
      var check;

      if (typeof propName !== 'string') {
        invalidArg('propName', propName);
      }

      if (!(arguments.length <= 2)) {
        tooManyArgs();
      }

      check = void 0;

      (function (result, value) {
        if (!isResult(result)) {
          value = result;
        }

        if (!check) {
          return (result = new Result()).context(Result.prop(propName), function () {
            return check = _buildLevel(result, fieldsDesc, value);
          });
        } else {
          return check(result = new Result(), value); // (value) ->
        }
      });
    };
  }; // ----------------------------


  module.exports = $$vueDebugWatchBuilderBuilder;
}).call(void 0);
"use strict";

// Generated by CoffeeScript 2.5.1
(function () {
  var Result, processFields, processUdtypeFields;
  Result = require('../result');
  processFields = require('./_processFields');

  processUdtypeFields = function processUdtypeFields(result, config) {
    var _buildOrder, i, len, order, ref, stack, udType;

    console.info(5, config.udtypes === 'failed');

    if (config.udtypes === 'failed') {
      return;
    }

    stack = [];
    order = [];

    _buildOrder = function _buildOrder(udType) {
      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      if (~stack.indexOf(udType)) {
        result.error('dsc.cycledUdtypeDefinition', {
          type: udType
        });
        return;
      }

      stack.push(udType.name);
      result.context(Result.prop(level === 0 ? 'udtypes' : 'fields'), function () {
        return result.context(function (path) {
          return Result.prop(udType.name)(path);
        }, function () {
          var i, item, len, ref, results;
          ref = udType.fields;
          results = [];

          for (i = 0, len = ref.length; i < len; i++) {
            item = ref[i];

            if (item.hasOwnProperty('fields')) {
              results.push(_processLevel(item, level + 1));
            }
          }

          return results;
        });
      });
      order.push(udType); // udtype с fields используемые в этом типе должны идти раньше

      return stack.pop();
    };

    ref = config.udtypes.$$list;

    for (i = 0, len = ref.length; i < len; i++) {
      udType = ref[i];

      if (udType.hasOwnProperty('fields')) {
        if (!~order.indexOf(udType.name)) {
          _buildOrder(udType);
        }
      }
    }

    console.info(35, order);
    udType = void 0;
    result.context(Result.prop('udtypes'), function () {
      return result.context(function (path) {
        return Result.prop(udType.name)(path);
      }, function () {
        var j, len1, results;
        results = [];

        for (j = 0, len1 = order.length; j < len1; j++) {
          udType = order[j];
          processFields(result, udType, config, 'fields', true);
          delete fields.$$flat; // это не самостатоятельная структура.  она будет вставляться в иерархию полей

          results.push(delete fields.$$tags);
        }

        return results;
      });
    });
  }; // ----------------------------


  module.exports = processUdtypeFields;
}).call(void 0);
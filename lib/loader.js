"use strict";

// Generated by CoffeeScript 2.5.1
(function () {
  var Result, _deleteRequireCache, invalidArg, isResult, loader, path, tooManyArgs;

  path = require('path');
  Result = require('./result');

  var _require = require('./utils');

  var _require$err = _require.err;
  tooManyArgs = _require$err.tooManyArgs;
  invalidArg = _require$err.invalidArg;
  isResult = _require$err.isResult;

  _deleteRequireCache = function deleteRequireCache(id) {
    var files;

    if (!id || id.indexOf('node_modules') !== -1) {
      return;
    }

    files = require.cache[id];

    if (files !== void 0) {
      Object.keys(files.children).forEach(function (file) {
        _deleteRequireCache(files.children[file].id);
      });
      delete require.cache[id];
    }
  };

  loader = function loader(result, sourceDir) {
    if (!isResult(result)) {
      invalidArg('result', result);
    }

    if (!(typeof sourceDir === 'string' && sourceDir.length > 0)) {
      invalidArg('sourceDir', sourceDir);
    }

    if (!(arguments.length <= 2)) {
      tooManyArgs();
    }

    return new Promise(function (resolve, reject) {
      // loader =
      var dir, loadFile, res, rights, udt;
      dir = path.join(process.cwd(), sourceDir);

      loadFile = function loadFile(filename, required) {
        var err, isFileItself, modId;

        try {
          filename = path.join(dir, filename);
          modId = require.resolve(filename);

          _deleteRequireCache(modId);

          return require(filename); // loadFile =
        } catch (error) {
          err = error;
          isFileItself = err.message.indexOf(filename) >= 0;

          if (isFileItself) {
            if (required) {
              result.error('dsc.missingFile', {
                value: filename
              });
            } else {
              result.warn('dsc.noSuchFile', {
                value: filename
              });
            }
          } else {
            result.error(function () {
              return filename;
            }, 'dsc.compilerError', {
              value: err.message,
              stack: err.stack // loadFile =

            });
          }
        }
      };

      res = {
        docs: loadFile('docs', true)
      };

      if (udt = loadFile('udt', false)) {
        res.udt = udt;
      }

      if (rights = loadFile('rights', false)) {
        res.rights = rights;
      }

      if (result.isError) {
        reject(result);
      } else {
        resolve(res); // new Promise
      }
    });
  }; // ----------------------------


  module.exports = loader;
}).call(void 0);
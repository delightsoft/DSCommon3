"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Generated by CoffeeScript 2.5.1
(function () {
  var Result, _deleteRequireCache, hasOwnProperty, invalidArg, isResult, loader, path, tooManyArgs;

  path = require('path');
  Result = require('./result');

  var _require = require('./utils');

  var _require$err = _require.err;
  tooManyArgs = _require$err.tooManyArgs;
  invalidArg = _require$err.invalidArg;
  isResult = _require$err.isResult;
  hasOwnProperty = Object.prototype.hasOwnProperty;

  _deleteRequireCache = function deleteRequireCache(id) {
    var files;

    if (!id || id.indexOf('node_modules') !== -1) {
      return;
    }

    files = require.cache[id];

    if (files !== void 0) {
      Object.keys(files.children).forEach(function (file) {
        _deleteRequireCache(files.children[file].id);
      });
      delete require.cache[id];
    }
  };

  loader = function loader(result, sourceDir) {
    if (!isResult(result)) {
      invalidArg('result', result);
    }

    if (!(typeof sourceDir === 'string' && sourceDir.length > 0)) {
      invalidArg('sourceDir', sourceDir);
    }

    if (!(arguments.length <= 2)) {
      tooManyArgs();
    }

    return new Promise(function (resolve, reject) {
      // loader =
      var api, dir, loadFile, res, types, validators;
      dir = path.resolve(process.cwd(), sourceDir);

      loadFile = function loadFile(filename, required) {
        var err, modId, res;
        filename = path.join(dir, filename);
        modId = void 0;

        try {
          modId = require.resolve(filename);
        } catch (error) {
          err = error;

          if (required) {
            result.error('dsc.missingFile', {
              value: filename
            });
          } else {
            result.warn('dsc.noSuchFile', {
              value: filename
            });
          }

          return;
        }

        _deleteRequireCache(modId);

        res = require(filename);

        if (_typeof(res) === 'object' && res !== null && hasOwnProperty.call(res, 'default')) {
          res = res["default"] || res;
        }

        if (typeof res === 'function') {
          res = res(result);
        }

        return res; // loadFile =
      };

      res = {
        docs: loadFile('docs', true)
      };

      if (types = loadFile('types', false)) {
        res.udtypes = types;
      }

      if (api = loadFile('api', false)) {
        //    res.rights = rights if (rights = loadFile 'rights', false)
        res.api = api;
      }

      if (validators = loadFile('validators', false)) {
        res.validators = validators;
      }

      resolve(res); // new Promise
    });
  }; // ----------------------------


  module.exports = loader;
}).call(void 0);
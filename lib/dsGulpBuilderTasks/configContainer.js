"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Generated by CoffeeScript 2.5.1
(function () {
  var ConfigContainer, fs, invalidArg, invalidValue, path, tooManyArgs, unlinkConfig;
  fs = require('fs');
  path = require('path');

  var _require = require('../index');

  unlinkConfig = _require.config.unlink;
  var _require$utils$err = _require.utils.err;
  invalidArg = _require$utils$err.invalidArg;
  invalidValue = _require$utils$err.invalidValue;
  tooManyArgs = _require$utils$err.tooManyArgs;

  ConfigContainer = /*#__PURE__*/function () {
    function ConfigContainer() {
      _classCallCheck(this, ConfigContainer);

      this._config = null;
      this._watch = [];
    }

    _createClass(ConfigContainer, [{
      key: "set",
      value: function set(config) {
        var i, listener, ref;
        this._config = config;
        ref = this._watch; //listener config for listener in @_watch by -1

        for (i = ref.length - 1; i >= 0; i += -1) {
          listener = ref[i];
          listener(config);
        }
      }
    }, {
      key: "watch",
      value: function watch(listener) {
        var _this = this;

        var active, watch;

        if (typeof listener !== 'function') {
          invalidArg('listener', listener);
        }

        (watch = this._watch).push(listener);

        if (this._config) {
          // first I should return 'unwatch'
          process.nextTick(function () {
            listener(_this._config);
          });
        }

        active = true;
        return function () {
          if (active) {
            active = false;
            return watch.splice(watch.indexOf(listener), 1);
          }
        };
      }
    }, {
      key: "save",
      value: function save(destFile, opts) {
        var k, tab, v;

        if (!(typeof destFile === 'string' && destFile.length > 0)) {
          invalidArg('destFile', destFile);
        }

        if (!(typeof opts === 'undefined' || _typeof(opts) === 'object' && opts !== null)) {
          invalidArg('opts', opts);
        }

        if (!(arguments.length <= 2)) {
          tooManyArgs();
        }

        tab = void 0;

        if (opts) {
          for (k in opts) {
            v = opts[k];

            switch (k) {
              case 'tab':
                if (typeof v !== 'string') {
                  invalidValue('opts.tab', v);
                }

                tab = v;
                break;

              default:
                invalidArg("opts.".concat(k), v);
            }
          }
        }

        this.watch(function (config) {
          var dir, file;
          dir = path.join(process.cwd(), path.dirname(destFile));

          if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir);
          }

          file = path.join(dir, path.basename(destFile));

          if (fs.existsSync(file)) {
            fs.unlinkSync(file);
          }

          fs.writeFileSync(file, JSON.stringify(unlinkConfig(config), null, tab)); // @watch
          // save:
        });
      }
    }]);

    return ConfigContainer;
  }(); // ----------------------------


  module.exports = ConfigContainer;
}).call(void 0);
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

// Generated by CoffeeScript 2.5.1
(function () {
  var Reporter, Result, changed, configCompile, configLoader, gutil, messagesCompile, path, rename, through;
  path = require('path');
  gutil = require('gulp-util');
  rename = require('gulp-rename');
  through = require('through2');
  changed = require('gulp-changed');

  var _require = require('../index');

  Result = _require.Result;
  Reporter = _require.Reporter;
  configLoader = _require.loader;
  var _require$config = _require.config;
  configCompile = _require$config.compile;
  messagesCompile = _require$config.messages;

  module.exports = function (DSGulpBuilder) {
    var CompileConfig, TaskBase, invalidArg, invalidOptionType, missingArg, preprocessPath, tooManyArgs, unsupportedOption;

    var _TaskBase = TaskBase = DSGulpBuilder.TaskBase;

    invalidArg = _TaskBase.invalidArg;
    tooManyArgs = _TaskBase.tooManyArgs;
    missingArg = _TaskBase.missingArg;
    unsupportedOption = _TaskBase.unsupportedOption;
    invalidOptionType = _TaskBase.invalidOptionType;
    preprocessPath = _TaskBase.preprocessPath;
    return CompileConfig = function () {
      var oldMixinAssert;

      var CompileConfig = /*#__PURE__*/function (_TaskBase2) {
        _inherits(CompileConfig, _TaskBase2);

        var _super = _createSuper(CompileConfig);

        // module.exports =
        function CompileConfig(task, _src) {
          var _this;

          _classCallCheck(this, CompileConfig);

          if (arguments.length < 2) {
            missingArg();
          }

          if (arguments.length > 2) {
            tooManyArgs();
          }

          _this = _super.call(this, task);
          _this._src = _src;
          _this._configContainer = null;

          if (!(typeof _this._src === 'string' && _this._src !== '')) {
            throw new Error('Invalid source file or directory name (1st argument)');
          }

          var _preprocessPath = preprocessPath(_this._src, "**/*");

          _this._fixedSrc = _preprocessPath.path;
          _this._singleFile = _preprocessPath.single;
          // constructor:
          return _possibleConstructorReturn(_this);
        }

        _createClass(CompileConfig, [{
          key: "dest",
          value: function dest(configContainer) {
            var ref;

            if (!(_typeof(configContainer) === 'object' && configContainer !== null && typeof ((ref = configContainer.__proto__) != null ? ref.watch : void 0) === 'function')) {
              invalidArg('configContainer', configContainer);
            }

            this._configContainer = configContainer;

            if (!(arguments.length <= 2)) {
              tooManyArgs();
            }

            return this;
          }
        }, {
          key: "_build",
          value: function _build() {
            var _this2 = this;

            var ReporterImpl;

            if (this._built) {
              return this._name;
            }

            if (typeof this._mixinAssert === "function") {
              this._mixinAssert();
            }

            TaskBase.addToWatch(function () {
              global.gulp.watch(_this2._fixedSrc, [_this2._name]);
            });

            ReporterImpl = /*#__PURE__*/function (_Reporter) {
              _inherits(ReporterImpl, _Reporter);

              var _super2 = _createSuper(ReporterImpl);

              function ReporterImpl() {
                _classCallCheck(this, ReporterImpl);

                return _super2.apply(this, arguments);
              }

              _createClass(ReporterImpl, [{
                key: "_print",
                value: function _print(type, msg) {
                  // TODO: Add messages limit
                  switch (type) {
                    case 'error':
                      console.error(gutil.colors.red("".concat(type, ": ").concat(msg)));
                      break;

                    case 'warn':
                      console.warn(gutil.colors.green("".concat(type, ": ").concat(msg)));
                      break;

                    case 'info':
                      console.info("".concat(type, ": ").concat(msg));
                      break;

                    default:
                      throw new Error("Unexpected 'type': ".concat(type));
                  }
                }
              }]);

              return ReporterImpl;
            }(Reporter);

            global.gulp.task(this._name, this._deps, function (cb) {
              var messages, result;
              messages = messagesCompile(result = new ReporterImpl());

              if (result.isError) {
                cb();
              } else {
                result = new ReporterImpl(messages);
                configLoader(result, _this2._src).then(function (loadedConfig) {
                  var config;
                  config = configCompile(result, loadedConfig);

                  if (!result.isError) {
                    _this2._configContainer.set(config);
                  }

                  cb();
                }, function () {
                  cb();
                });
              }

              return false; // GLOBAL.gulp.task
            });
            this._built = true;
            return this._name; // _build:
          }
        }]);

        return CompileConfig;
      }(TaskBase);

      ;
      var _ref = [CompileConfig.prototype._mixinAssert, function () {
        if (oldMixinAssert != null) {
          oldMixinAssert.call(this);
        }

        if (this._configContainer === null) {
          throw new Error("Task '".concat(this._name, "': dest is not specified"));
        }
      }];
      oldMixinAssert = _ref[0];
      CompileConfig.prototype._mixinAssert = _ref[1];
      return CompileConfig;
    }.call(this);
  };
}).call(void 0);
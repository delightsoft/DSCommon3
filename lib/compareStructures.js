"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Generated by CoffeeScript 2.5.1
(function () {
  var Result, _compactValue, _compareList, _compareMap, _compareValue, compareStructures;

  Result = require('./result');

  _compactValue = function _compactValue(v) {
    if (_typeof(v) === 'object') {
      if (v === null) {
        return 'null';
      } else if (Array.isArray(v)) {
        return '[Array]';
      } else if (v.hasOwnProperty('name')) {
        return "[Item(".concat(v.name, ")]");
      } else {
        return '[Object]';
      }
    } else {
      return v; // _compactValue =
    }
  };

  _compareMap = function _compareMap(result, path, actual, expected, severity) {
    var k;

    if (!(path.indexOf(actual) >= 0)) {
      path.push(actual);
      k = void 0;
      result.context(function (path) {
        return (expected.hasOwnProperty('$$list') && !k.startsWith('$') ? Result.item : Result.prop)(k)(path);
      }, function () {
        var j, l, len, len1, ref, ref1, results, v;
        ref = Object.keys(expected);

        for (j = 0, len = ref.length; j < len; j++) {
          k = ref[j];
          v = expected[k];

          if (!actual.hasOwnProperty(k)) {
            result[severity]('missing', {
              value: _compactValue(v)
            });
          } else {
            _compareValue(result, path, actual[k], v, severity);
          }
        }

        ref1 = Object.keys(actual);
        results = [];

        for (l = 0, len1 = ref1.length; l < len1; l++) {
          k = ref1[l];

          if (!expected.hasOwnProperty(k)) {
            results.push(result[severity]('extra', {
              value: _compactValue(actual[k])
            }));
          }
        }

        return results;
      });
      path.pop(); // _compareMap =
    }
  };

  _compareList = function _compareList(result, path, actual, expected, severity) {
    var i;

    if (!(path.indexOf(actual) >= 0)) {
      path.push(actual);
      i = void 0;
      result.context(function (path) {
        return Result.index(i)(path);
      }, function () {
        var j, l, len, len1, ref, results, v;

        for (i = j = 0, len = expected.length; j < len; i = ++j) {
          v = expected[i];

          if (i < actual.length) {
            _compareValue(result, path, actual[i], v, severity);
          } else {
            result[severity]('missing', {
              value: _compactValue(v)
            });
          }
        }

        ref = actual.slice(expected.length, actual.length);
        results = [];

        for (i = l = 0, len1 = ref.length; l < len1; i = ++l) {
          v = ref[i];
          results.push(result[severity]('extra', {
            value: _compactValue(v)
          }));
        }

        return results;
      });
      path.pop(); // _compareList =
    }
  };

  _compareValue = function _compareValue(result, path, actual, expected, severity) {
    var atype, etype;

    if ((atype = _typeof(actual)) === 'object') {
      atype = actual === null ? 'null' : Array.isArray(actual) ? 'array' : 'object';
    }

    if ((etype = _typeof(expected)) === 'object') {
      etype = expected === null ? 'null' : Array.isArray(expected) ? 'array' : 'object';
    }

    if (atype !== etype) {
      result[severity]('diffType', {
        actual: atype,
        expected: etype
      });
    } else {
      switch (atype) {
        case 'object':
          _compareMap(result, path, actual, expected, severity);

          break;

        case 'array':
          _compareList(result, path, actual, expected, severity);

          break;

        default:
          if (actual !== expected) {
            result[severity]('diffValue', {
              actual: _compactValue(actual),
              expected: _compactValue(expected) // _compareValue =

            });
          }

      }
    }
  };

  compareStructures = function compareStructures(result, actual, expected) {
    var severity = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'info';

    _compareValue(result, [], actual, expected, severity); // compareStructures =

  }; // ----------------------------


  module.exports = compareStructures;
}).call(void 0);
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Generated by CoffeeScript 2.5.1
(function () {
  var BitArray, invalidArg, tooManyArgs;

  invalidArg = function invalidArg(name, value) {
    throw new Error("Invalid argument '".concat(name, "': ").concat(value));
  };

  tooManyArgs = function tooManyArgs() {
    throw new Error("Too many arguments");
  };

  BitArray = /*#__PURE__*/function () {
    function BitArray(arg1, arg2, arg3) {
      _classCallCheck(this, BitArray);

      var collection, i, j, len, mask, ref;

      if (Array.isArray(arg1)) {
        // it's private constructor
        if (!Array.isArray(arg2)) {
          throw new Error("Invalid arg2: ".concat(arg2));
        }

        if (!(_typeof(arg3) === 'object' && arg3.$$list)) {
          throw new Error("Invalid arg3: ".concat(arg3));
        }

        this._list = arg1;
        this._mask = arg2;
        this._collection = arg3;
      } else {
        if (!(_typeof(arg1) === 'object' && arg1 !== null && arg1.hasOwnProperty('$$list'))) {
          invalidArg('arg1', arg1);
        }

        if (!(arguments.length <= 1)) {
          tooManyArgs();
        }

        this._list = collection = arg1.hasOwnProperty('$$flat') ? arg1.$$flat.$$list : arg1.$$list;
        this._mask = mask = new Array(len = Math.trunc((collection.length + 31) / 32));
        this._collection = arg1;

        for (i = j = 0, ref = len; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          mask[i] = 0;
        }
      }

      this._edit = true; // constructor:

      return;
    }

    _createClass(BitArray, [{
      key: "set",
      value: function set(index, value) {
        var i, m, mask, r, v;

        if (!(typeof index === 'number' && index % 1 === 0)) {
          invalidArg('index');
        }

        if (value === void 0) {
          value = true;
        } else {
          if (typeof value !== 'boolean') {
            invalidArg('value', value);
          }
        }

        if (!(arguments.length <= 2)) {
          tooManyArgs();
        }

        if (!(0 <= index && index < this._list.length)) {
          throw new Error("index out of range: ".concat(index));
        }

        mask = function () {
          var j, len1, ref;

          if (this._edit) {
            return this._mask;
          } else {
            r = new Array(this._mask.length);
            ref = this._mask;

            for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
              v = ref[i];
              r[i] = v;
            }

            return r;
          }
        }.call(this);

        m = 1 << index % 32;

        if (value) {
          mask[Math.trunc(index / 32)] |= m;
        } else {
          mask[Math.trunc(index / 32)] &= ~m;
        }

        if (this._edit) {
          delete this._listProp;
          return this;
        } else {
          return new BitArray(this._list, mask, this._collection); // set:
        }
      }
    }, {
      key: "get",
      value: function get(index) {
        var value;

        if (!(typeof index === 'number' && index % 1 === 0)) {
          invalidArg('index', index);
        }

        if (value === void 0) {
          value = true;
        }

        if (!(arguments.length <= 1)) {
          tooManyArgs();
        }

        if (!(0 <= index && index < this._list.length)) {
          throw new Error("index out of range: ".concat(index));
        }

        return (this._mask[Math.trunc(index / 32)] & 1 << index % 32) !== 0; // get:
      }
    }, {
      key: "equal",
      value: function equal(bitArray) {
        var collection, rightMask;

        if (!(_typeof(bitArray) === 'object' && bitArray !== null && bitArray.hasOwnProperty('_mask'))) {
          invalidArg('bitArray', bitArray);
        }

        if (!(arguments.length <= 1)) {
          tooManyArgs();
        }

        if (this._list !== (collection = bitArray._list)) {
          throw new Error('given bitArray is different collection');
        }

        rightMask = bitArray._mask;
        return this._mask.every(function (v, i) {
          return rightMask[i] === v; // equal:
        });
      }
    }, {
      key: "clone",
      value: function clone() {
        var i, j, leftMask, len, ref, resMask;

        if (!(arguments.length <= 0)) {
          tooManyArgs();
        }

        resMask = new Array(len = (leftMask = this._mask).length);

        for (i = j = 0, ref = len; j < ref; i = j += 1) {
          resMask[i] = leftMask[i];
        }

        return new BitArray(this._list, resMask, this._collection); // clone:
      }
    }, {
      key: "and",
      value: function and(bitArray) {
        var i, j, leftMask, len, ref, resMask, rightMask;

        if (typeof bitArray === 'string') {
          bitArray = this._collection.$$calc.apply(void 0, arguments);
        } else {
          if (!(_typeof(bitArray) === 'object' && bitArray !== null && bitArray.hasOwnProperty('_mask'))) {
            invalidArg('bitArray', bitArray);
          }

          if (!(arguments.length <= 1)) {
            tooManyArgs();
          }
        }

        if (this._list !== bitArray._list) {
          throw new Error('given bitArray is different collection');
        }

        len = (leftMask = this._mask).length;
        resMask = this._edit ? this._mask : new Array(len);
        rightMask = bitArray._mask;

        for (i = j = 0, ref = len; j < ref; i = j += 1) {
          resMask[i] = leftMask[i] & rightMask[i];
        }

        if (this._edit) {
          // and:
          delete this._listProp;
          return this;
        } else {
          return new BitArray(this._list, resMask, this._collection);
        }
      }
    }, {
      key: "or",
      value: function or(bitArray) {
        var collection, i, j, leftMask, len, ref, resMask, rightMask;

        if (typeof bitArray === 'string') {
          bitArray = this._collection.$$calc.apply(void 0, arguments);
        } else {
          if (!(_typeof(bitArray) === 'object' && bitArray !== null && bitArray.hasOwnProperty('_mask'))) {
            invalidArg('bitArray', bitArray);
          }

          if (!(arguments.length <= 1)) {
            tooManyArgs();
          }
        }

        if (this._list !== (collection = bitArray._list)) {
          throw new Error('given bitArray is different collection');
        }

        len = (leftMask = this._mask).length;
        resMask = this._edit ? this._mask : new Array(len);
        rightMask = bitArray._mask;

        for (i = j = 0, ref = len; j < ref; i = j += 1) {
          resMask[i] = leftMask[i] | rightMask[i];
        }

        if (this._edit) {
          // or:
          delete this._listProp;
          return this;
        } else {
          return new BitArray(this._list, resMask, this._collection);
        }
      }
    }, {
      key: "subtract",
      value: function subtract(bitArray) {
        var collection, i, j, leftMask, len, ref, resMask, rightMask;

        if (typeof bitArray === 'string') {
          bitArray = this._collection.$$calc.apply(void 0, arguments);
        } else {
          if (!(_typeof(bitArray) === 'object' && bitArray !== null && bitArray.hasOwnProperty('_mask'))) {
            invalidArg('bitArray', bitArray);
          }

          if (!(arguments.length <= 1)) {
            tooManyArgs();
          }
        }

        if (this._list !== (collection = bitArray._list)) {
          throw new Error('given bitArray is different collection');
        }

        len = (leftMask = this._mask).length;
        resMask = this._edit ? this._mask : new Array(len);
        rightMask = bitArray._mask;

        for (i = j = 0, ref = len; j < ref; i = j += 1) {
          resMask[i] = leftMask[i] & ~rightMask[i];
        }

        if (this._edit) {
          // subtract::
          delete this._listProp;
          return this;
        } else {
          return new BitArray(this._list, resMask, this._collection);
        }
      }
    }, {
      key: "invert",
      value: function invert() {
        var i, j, k, leftMask, len, len1, mask, r, ref, resMask, v;

        if (arguments.length !== 0) {
          tooManyArgs();
        }

        if (this._edit) {
          for (i = j = 0, ref = len = (mask = this._mask).length; j < ref; i = j += 1) {
            mask[i] = ~mask[i];
          }

          if ((r = this._list.length % 32) > 0) {
            mask[len - 1] &= (1 << r) - 1;
          }

          delete this._listProp;
          return this;
        } else {
          resMask = new Array(len = (leftMask = this._mask).length);

          for (i = k = 0, len1 = leftMask.length; k < len1; i = ++k) {
            v = leftMask[i];
            resMask[i] = ~v;
          }

          if ((r = this._list.length % 32) > 0) {
            resMask[len - 1] &= (1 << r) - 1;
          }

          return new BitArray(this._list, resMask, this._collection); // invert:
        }
      }
    }, {
      key: "isEmpty",
      value: function isEmpty() {
        var j, len1, ref, v;
        ref = this._mask;

        for (j = 0, len1 = ref.length; j < len1; j++) {
          v = ref[j];

          if (v !== 0) {
            return false;
          }
        }

        return true; // isEmpty:
      }
    }, {
      key: "lock",
      value: function lock() {
        delete this._edit;
        return this;
      }
    }, {
      key: "locked",
      value: function locked() {
        return !this._edit; // locked:
      }
    }, {
      key: "fixVertical",
      value: function fixVertical() {
        var i, item, itemMask, j, k, l, len1, mask, noSubfields, ref, ref1, ref2;
        mask = this._edit ? this._mask : new Array(this._mask.length);
        ref = this._list;

        for (j = 0, len1 = ref.length; j < len1; j++) {
          item = ref[j];

          if (!item.hasOwnProperty('$$mask')) {
            continue;
          }

          itemMask = item.$$mask._mask;
          noSubfields = true;

          for (i = k = 0, ref1 = mask.length; k < ref1; i = k += 1) {
            if (!((mask[i] & itemMask[i]) !== 0)) {
              continue;
            }

            noSubfields = false;
            break;
          }

          if (this.get(item.$$index)) {
            if (noSubfields) {
              for (i = l = 0, ref2 = mask.length; l < ref2; i = l += 1) {
                mask[i] |= itemMask[i];
              }
            }
          } else if (!noSubfields) {
            this.set(item.$$index);
          }
        }

        if (this._edit) {
          // fixVertical:
          delete this._listProp;
          return this;
        } else {
          return new BitArray(this._list, mask, this._collection);
        }
      }
    }, {
      key: "clearVertical",
      value: function clearVertical() {
        var i, item, itemMask, j, k, mask, noSubfields, ref, ref1;
        mask = this._edit ? this._mask : new Array(this._mask.length);
        ref = this._list;

        for (j = ref.length - 1; j >= 0; j += -1) {
          item = ref[j];

          if (!item.hasOwnProperty('$$mask')) {
            continue;
          }

          itemMask = item.$$mask._mask;
          noSubfields = true;

          for (i = k = 0, ref1 = mask.length; k < ref1; i = k += 1) {
            if (!((mask[i] & itemMask[i]) !== 0)) {
              continue;
            }

            noSubfields = false;
            break;
          }

          this.set(item.$$index, !noSubfields);
        }

        if (this._edit) {
          // clearVertical:
          delete this._listProp;
          return this;
        } else {
          return new BitArray(this._list, mask, this._collection); // fixVertical:
        }
      }
    }, {
      key: "_buildList",
      value: function _buildList() {
        var collection, i, j, len, list, m, mask, p, ref, v;
        this._listProp = list = [];
        len = (collection = this._list).length;
        m = 1;
        v = (mask = this._mask)[p = 0];

        for (i = j = 0, ref = len; j < ref; i = j += 1) {
          if ((v & m) !== 0) {
            list.push(collection[i]);
          }

          if ((m <<= 1) === 0) {
            m = 1;
            v = mask[++p];
          }
        }

        return this;
      }
    }, {
      key: "valueOf",
      value: function valueOf() {
        var i, j, len, m, mask, p, ref, res, v;
        res = [];
        len = this._list.length;
        m = 1;
        v = (mask = this._mask)[p = 0];

        for (i = j = 0, ref = len; j < ref; i = j += 1) {
          if ((v & m) !== 0) {
            res.push(i);
          }

          if ((m <<= 1) === 0) {
            m = 1;
            v = mask[++p];
          }
        }

        return res; // valueOf:
      }
    }]);

    return BitArray;
  }();

  Object.defineProperty(BitArray.prototype, 'list', {
    configurable: true,
    enumerable: true,
    get: function get() {
      if (!this.hasOwnProperty('_listProp')) {
        this._buildList();
      }

      return this._listProp; // get: ->
    }
  });
  Object.defineProperty(BitArray.prototype, 'add', {
    value: BitArray.prototype.or,
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BitArray.prototype, 'remove', {
    value: BitArray.prototype.subtract,
    enumerable: false,
    configurable: true
  }); // ----------------------------

  module.exports = BitArray;
}).call(void 0);
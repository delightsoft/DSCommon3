"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Generated by CoffeeScript 2.5.1
(function () {
  var _moment, moment, validate, validateStructure;

  _moment = void 0;

  moment = function moment() {
    return _moment || (_moment = require('moment'));
  };

  validateStructure = function validateStructure(type) {
    return function (result, value) {
      var fields, name;

      if (!(_typeof(value) === 'object' && value !== null && !Array.isArray(value))) {
        result.error('validate.invalidValue', {
          value: value
        });
        return;
      }

      fields = type.fields;
      result.isError = false;
      name = void 0;
      result.context(function (path) {
        return Result.prop(name)(path);
      }, function () {
        var field, j, len, results;
        results = [];

        for (j = 0, len = fields.length; j < len; j++) {
          field = fields[j];
          name = field.name;

          if (value.hasOwnProperty(name)) {
            results.push(field.validate(result, value[name]));
          } else if (field.required) {
            results.push(result.error('validate.missingField', {
              value: name
            }));
          } else {
            results.push(void 0);
          }
        }

        return results;
      });

      if (result.isError) {
        result.error('validate.invalidValue', {
          value: value
        });
      }
    };
  };

  validate = function validate(type) {
    var f;

    switch (type.type) {
      case 'string':
        f = function f(result, value) {
          if (typeof value !== 'string') {
            result.error('validate.invalidValue', {
              value: value
            });
          }
        };

        break;

      case 'text':
        f = function f(result, value) {
          if (typeof value !== 'string') {
            result.error('validate.invalidValue', {
              value: value
            });
          }
        };

        break;

      case 'boolean':
        f = function f(result, value) {
          if (typeof value !== 'boolean') {
            result.error('validate.invalidValue', {
              value: value
            });
          }
        };

        break;

      case 'integer':
        f = function f(result, value) {
          if (!(typeof value === 'number' && Number.isInteger(value))) {
            result.error('validate.invalidValue', {
              value: value
            });
          }
        };

        break;

      case 'double':
        f = function f(result, value) {
          if (typeof value !== 'number') {
            result.error('validate.invalidValue', {
              value: value
            });
          }
        };

        break;

      case 'time':
        f = function f(result, value) {
          if (!(typeof value === 'string' && moment()(value, 'HH:MM').isValid())) {
            result.error('validate.invalidValue', {
              value: value
            });
          }
        };

        break;

      case 'date':
        f = function f(result, value) {
          if (!(typeof value === 'string' && moment()(value, 'YYYY-MM-DD HH:MM').isValid())) {
            result.error('validate.invalidValue', {
              value: value
            });
          }
        };

        break;

      case 'dateonly':
        f = function f(result, value) {
          if (!(typeof value === 'string' && moment()(value, 'YYYY-MM-DD').isValid())) {
            result.error('validate.invalidValue', {
              value: value
            });
          }
        };

        break;

      case 'enum':
        f = function f(result, value) {
          if (!(typeof value === 'string' && type["enum"].hasOwnProperty(value))) {
            result.error('validate.invalidValue', {
              value: value
            });
          }
        };

        break;

      case 'structure':
        f = validateStructure(type);
        break;

      case 'subtable':
        f = function f(result, value) {
          var i;

          if (!Array.isArray(value)) {
            result.error('validate.invalidValue', {
              value: value
            });
            return;
          }

          result.isError = false;
          i = void 0;
          result.context(function (path) {
            return Result.item(i)(path);
          }, function () {
            var j, len, results, row;
            results = [];

            for (i = j = 0, len = value.length; j < len; i = ++j) {
              row = value[i];
              results.push(validateStructure(result, row));
            }

            return results;
          });

          if (result.isError || type.required && value.length === 0) {
            result.error('validate.invalidValue', {
              value: value
            });
          }
        };

    }

    if (type["null"]) {
      (function (pf) {
        return f = function f(result, value) {
          if (value === null) {} else {
            return pf(result, value);
          }
        };
      })(f);
    }

    return f; // validate =
  }; // ----------------------------


  module.exports = validate;
  validate.structure = validateStructure;
}).call(void 0);
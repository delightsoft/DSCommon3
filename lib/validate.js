"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Generated by CoffeeScript 2.5.1
(function () {
  var Result, _moment, _addValidate, momentLdr, validate, validateStructureBuilder;

  Result = require('./result');
  _moment = void 0;

  momentLdr = function momentLdr() {
    return _moment || (_moment = require('moment'));
  }; // type - structure или subtable


  validateStructureBuilder = function validateStructureBuilder(type) {
    var fieldsProp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'fields';
    // mask - поля, которые нужно прверять
    // onlyFields - необязательный map, только поля которые нужно проверять
    return function (result, value, viewMask, requiredMask, onlyFields, strict) {
      var err, field, fieldName, j, len, ref;

      if (!(_typeof(value) === 'object' && value !== null && !Array.isArray(value))) {
        return result.error('validate.invalidValue', {
          value: value
        });
      }

      err = void 0;
      fieldName = void 0;
      result.context(function (path) {
        return Result.prop(fieldName)(path);
      }, function () {
        var field, fieldValue, results;
        results = [];

        for (fieldName in value) {
          fieldValue = value[fieldName];

          if (!fieldName.startsWith('$$')) {
            if (!type[fieldsProp].hasOwnProperty(fieldName)) {
              results.push(err = result.error('validate.unknownField', {
                name: fieldName,
                value: fieldValue
              }) || err);
            } else {
              field = type[fieldsProp][fieldName];

              if (!viewMask.get(field.$$index)) {
                if (strict) {
                  results.push(err = result.error('validate.unexpectedField', {
                    name: fieldName,
                    value: fieldValue
                  }) || err);
                } else {
                  results.push(void 0);
                }
              } else if (!onlyFields || onlyFields[field.name]) {
                results.push(err = field.validate(result, fieldValue, viewMask, requiredMask, _typeof(field) === 'object' && field !== null && !Array.isArray(field) ? field.$$touched : void 0, strict) || err);
              } else {
                results.push(void 0);
              }
            }
          }
        }

        return results;
      });
      ref = type[fieldsProp].$$list;

      for (j = 0, len = ref.length; j < len; j++) {
        field = ref[j];

        if (viewMask.get(field.$$index) && (field.required || requiredMask && requiredMask.get(field.$$index)) && !value.hasOwnProperty(field.name) && (!onlyFields || onlyFields[field.name])) {
          err = result.error('validate.requiredField', {
            value: field.name
          }) || err;
        }
      }

      return err; // (result, value, mask, onlyFields) ->
    };
  };

  _addValidate = function addValidate(fields) {
    fields.$$list.forEach(function (f) {
      f.validate = validate(f);

      if (f.fields) {
        _addValidate(f.fields);
      }
    });
    return fields; // addValidate =
  };

  validate = function validate(fieldDesc) {
    var f;

    f = function () {
      switch (fieldDesc.type) {
        case 'string':
          f = function f(result, value, viewMask, requiredMask) {
            if (typeof value !== 'string') {
              return result.error('validate.invalidValue', {
                value: value
              });
            }

            if (value.length === 0 && (fieldDesc.required || requiredMask && requiredMask.get(fieldDesc.$$index))) {
              return result.error('validate.requiredField', {
                name: value
              });
            }
          };

          if (fieldDesc.hasOwnProperty('min')) {
            (function (pf) {
              var min;
              min = fieldDesc.min;

              f = function f(result, value, viewMask, requiredMask) {
                var r;

                if (r = pf(result, value, viewMask, requiredMask)) {
                  return r;
                }

                if (!(min <= value.length)) {
                  return result.error('validate.tooShort', {
                    value: value,
                    min: min
                  });
                }
              };
            })(f);
          }

          if (fieldDesc.hasOwnProperty('regexp')) {
            (function (pf) {
              var regexp;
              regexp = fieldDesc.regexp;

              f = function f(result, value, viewMask, requiredMask) {
                var r;

                if (r = pf(result, value, viewMask, requiredMask)) {
                  return r;
                }

                if (!regexp.test(value)) {
                  return result.error('validate.invalidValue', {
                    value: value,
                    regexp: regexp.toString()
                  });
                }
              };
            })(f);
          }

          return f;
        // when 'string'

        case 'text':
          f = function f(result, value, viewMask, requiredMask) {
            if (typeof value !== 'string') {
              result.error('validate.invalidValue', {
                value: value
              });
            }

            if (fieldDesc.required || requiredMask && requiredMask.get(fieldDesc.$$index)) {
              return result.error('validate.requiredField', {
                name: value
              });
            }
          };

          if (fieldDesc.hasOwnProperty('min')) {
            (function (pf) {
              var min;
              min = fieldDesc.min;

              f = function f(result, value, viewMask, requiredMask) {
                var r;

                if (r = pf(result, value, viewMask, requiredMask)) {
                  return r;
                }

                if (!(min <= value.length)) {
                  return result.error('validate.tooShort', {
                    value: value,
                    min: min
                  });
                }
              };
            })(f);
          }

          if (fieldDesc.hasOwnProperty('max')) {
            (function (pf) {
              var max;
              max = fieldDesc.max;

              f = function f(result, value, viewMask, requiredMask) {
                var r;

                if (r = pf(result, value, viewMask, requiredMask)) {
                  return r;
                }

                if (!(value.length <= max)) {
                  return result.error('validate.tooLong', {
                    value: value,
                    max: max
                  });
                }
              };
            })(f);
          }

          if (fieldDesc.hasOwnProperty('regexp')) {
            (function (pf) {
              var regexp;
              regexp = fieldDesc.regexp;

              f = function f(result, value, viewMask, requiredMask) {
                var r;

                if (r = pf(result, value, viewMask, requiredMask)) {
                  return r;
                }

                if (!regexp.test(value)) {
                  return result.error('validate.invalidValue', {
                    value: value,
                    regexp: regexp.toString()
                  });
                }
              };
            })(f);
          }

          return f;
        // when 'text'

        case 'boolean':
          return function (result, value) {
            if (typeof value !== 'boolean') {
              return result.error('validate.invalidValue', {
                value: value
              });
            }
          };

        case 'integer':
          f = function f(result, value) {
            if (!(typeof value === 'number' && Number.isInteger(value))) {
              return result.error('validate.invalidValue', {
                value: value
              });
            }
          };

          if (fieldDesc.hasOwnProperty('min')) {
            (function (pf) {
              var min;
              min = fieldDesc.min;

              f = function f(result, value) {
                var r;

                if (r = pf(result, value)) {
                  return r;
                }

                if (!(min <= value)) {
                  return result.error('validate.tooSmall', {
                    value: value,
                    min: min
                  });
                }
              };
            })(f);
          }

          if (fieldDesc.hasOwnProperty('max')) {
            (function (pf) {
              var max;
              max = fieldDesc.max;

              f = function f(result, value) {
                var r;

                if (r = pf(result, value)) {
                  return r;
                }

                if (!(value <= max)) {
                  return result.error('validate.tooBig', {
                    value: value,
                    max: max
                  });
                }
              };
            })(f);
          }

          return f;
        // when 'integer'

        case 'double':
          f = function f(result, value) {
            if (typeof value !== 'number') {
              result.error('validate.invalidValue', {
                value: value
              });
            }
          };

          if (fieldDesc.hasOwnProperty('min')) {
            (function (pf) {
              var min;
              min = fieldDesc.min;

              f = function f(result, value) {
                var r;

                if (r = pf(result, value)) {
                  return r;
                }

                if (!(min <= value)) {
                  return result.error('validate.tooSmall', {
                    value: value,
                    min: min
                  });
                }
              };
            })(f);
          }

          if (fieldDesc.hasOwnProperty('max')) {
            (function (pf) {
              var max;
              max = fieldDesc.max;

              f = function f(result, value) {
                var r;

                if (r = pf(result, value)) {
                  return r;
                }

                if (!(value <= max)) {
                  return result.error('validate.tooBig', {
                    value: value,
                    max: max
                  });
                }
              };
            })(f);
          }

          return f;
        // when 'double'

        case 'time':
          return function (result, value) {
            if (!(typeof value === 'string' && momentLdr()(value, 'HH:mm', true).isValid())) {
              return result.error('validate.invalidValue', {
                value: value
              });
            }
          };

        case 'date':
          return function (result, value) {
            if (!(typeof value === 'string' && momentLdr()(value, 'YYYY-MM-DD HH:mm').isValid())) {
              return result.error('validate.invalidValue', {
                value: value
              });
            }
          };

        case 'dateonly':
          return function (result, value) {
            if (!(typeof value === 'string' && momentLdr()(value, 'YYYY-MM-DD').isValid())) {
              return result.error('validate.invalidValue', {
                value: value
              });
            }
          };

        case 'enum':
          return function (result, value) {
            if (!(typeof value === 'string' && fieldDesc["enum"].hasOwnProperty(value))) {
              return result.error('validate.invalidValue', {
                value: value
              });
            }
          };

        case 'structure':
          return validateStructureBuilder(fieldDesc);

        case 'subtable':
          return function () {
            var validateStructure;
            validateStructure = validateStructureBuilder(fieldDesc);
            return function (result, value, viewMask, requiredMask, strict) {
              var err, i;

              if (!Array.isArray(value)) {
                return result.error('validate.invalidValue', {
                  value: value
                });
              }

              if ((fieldDesc.required || requiredMask && requiredMask.get(fieldDesc.$$index)) && value.length === 0) {
                return result.error('validate.invalidValue', {
                  value: value
                });
              }

              result.isError = false;
              i = void 0;
              err = void 0;
              result.context(function (path) {
                return Result.index(i)(path);
              }, function () {
                var j, len, row;

                for (i = j = 0, len = value.length; j < len; i = ++j) {
                  row = value[i];
                  err = validateStructure(result, row, viewMask, requiredMask, row.$$touched, strict) || err;
                  return;
                }
              });
              return err; // (result, value, mask) ->
            };
          }();
      }
    }();

    if (fieldDesc["null"]) {
      (function (pf) {
        f = function f(result, value) {
          if (value !== null) {
            return pf(result, value);
          }
        };
      })(f);
    }

    return f; // validate =
  }; // ----------------------------


  module.exports = validate;
  validate.structure = validateStructureBuilder;
  validate.addValidate = _addValidate;
}).call(void 0);
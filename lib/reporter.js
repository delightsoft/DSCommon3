"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Generated by CoffeeScript 2.5.1
(function () {
  var Reporter, Result, i18n, invalidArg, isResult, tooManyArgs;
  i18n = require('./i18n');

  var _require = require('./utils');

  var _require$err = _require.err;
  tooManyArgs = _require$err.tooManyArgs;
  invalidArg = _require$err.invalidArg;
  isResult = _require$err.isResult;
  Result = require('./result');

  Reporter = function () {
    var Reporter = /*#__PURE__*/function () {
      // i18n - не обязательный параметр.
      // TODO: Implement context() with only one argument, without Result
      function Reporter(i18n1) {
        _classCallCheck(this, Reporter);

        this.i18n = i18n1;

        if (!(typeof this.i18n === 'undefined' || _typeof(this.i18n) === 'object' && this.i18n !== null)) {
          throw new Error("Invalid argument 'i18n'");
        }

        this.isError = this._err = false;

        this.pathFunc = function () {
          return '';
        };

        this.messages = 0;
        this.errors = 0;
        this.warnings = 0;
        return;
      }

      _createClass(Reporter, [{
        key: "log",
        value: function log(typeOrMsg, pathFunc, code, args) {
          var msg, path;

          if (_typeof(typeOrMsg) === 'object' && typeOrMsg !== null) {
            if (!typeOrMsg.hasOwnProperty('code')) {
              invalidArg('typeOrMsg', typeOrMsg);
            }

            msg = typeOrMsg;
          } else {
            if (typeof pathFunc !== 'function') {
              var _ref = [code, pathFunc, null];
              args = _ref[0];
              code = _ref[1];
              pathFunc = _ref[2];
            }

            path = this.pathFunc(path);

            if (pathFunc) {
              path = pathFunc(path);
            }

            msg = Result._combineMsg(typeOrMsg, path, code, args);
          }

          switch (msg.type) {
            case 'error':
              this.errors++;
              this.isError = this._err = true;
              break;

            case 'warn':
              this.warnings++;
          }

          this._print(msg.type ? msg.type : 'info', i18n.format(this.i18n, msg));

          return msg; // log: (arg1, arg2, arg3) ->
        } // Выводит содержимое result.  Если указан msgCode - то в начале пишется общее название операции.  При этом type
        // выбирается как наихудщий из типов сообщений в result

      }, {
        key: "logResult",
        value: function logResult(result, pathFunc, msgCode, args) {
          var i, j, len, len1, msg, path, ref, ref1, type;

          if (!isResult(result)) {
            invalidArg('result', result);
          }

          if (!(arguments.length <= 4)) {
            tooManyArgs();
          }

          if (pathFunc) {
            if (typeof pathFunc !== 'function') {
              var _ref2 = [msgCode, pathFunc, null];
              args = _ref2[0];
              msgCode = _ref2[1];
              pathFunc = _ref2[2];
            }

            if (!(typeof msgCode === 'undefined' || typeof msgCode === 'string' && msgCode.length > 0)) {
              invalidArg('msgCode', msgCode);
            }

            if (!(typeof args === 'undefined' || msgCode && _typeof(args) === 'object' && args !== null)) {
              invalidArg('args', args);
            }

            type = 'info';
            ref = result.messages;

            for (i = 0, len = ref.length; i < len; i++) {
              msg = ref[i];

              switch (msg.type) {
                case 'error':
                  type = 'error';
                  break;

                case 'warn':
                  if (type === 'info') {
                    type = 'warn';
                  }

              }
            }

            path = pathFunc ? pathFunc('') : '';

            this._print(type, i18n.format(this.i18n, Result._combineMsg(type, path, msgCode, args)));
          }

          ref1 = result.messages;

          for (j = 0, len1 = ref1.length; j < len1; j += 1) {
            msg = ref1[j];

            this._print(msg.type ? msg.type : 'info', i18n.format(this.i18n, msg));
          }

          return this;
        }
      }]);

      return Reporter;
    }();

    ;
    Reporter.prototype.error = Result.prototype.error;
    Reporter.prototype.warn = Result.prototype.warn;
    Reporter.prototype.info = Result.prototype.info;
    Reporter.prototype.context = Result.prototype.context;
    return Reporter;
  }.call(this); // ----------------------------


  module.exports = Reporter;
}).call(void 0);
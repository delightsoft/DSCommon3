"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Generated by CoffeeScript 2.5.1
(function () {
  var BitArray, Result, deepClone, finish, flatMap, _index, invalidArg, isResult, sortedMap;

  Result = require('./result');
  sortedMap = require('./sortedMap');
  BitArray = require('./bitArray');

  var _require = require('./utils');

  deepClone = _require.deepClone;
  var _require$err = _require.err;
  invalidArg = _require$err.invalidArg;
  isResult = _require$err.isResult;

  _index = function index(result, resValue, subitemsField, opts) {
    var _indexLevel2, _buildMask, masks, name, optsMask, resList, resMap;

    if (!isResult(result)) {
      invalidArg('result', result);
    }

    if (!(_typeof(resValue) === 'object' && resValue !== null)) {
      invalidArg('resValue', resValue);
    }

    if (!(typeof subitemsField === 'string' && subitemsField.length > 0)) {
      invalidArg('subitemsField', subitemsField);
    }

    if (!(opts === void 0 || _typeof(opts) === 'object' && opts !== null && !Array.isArray(opts))) {
      invalidArg('opts', opts);
    }

    if (opts) {
      opts = deepClone(opts);
      opts.index = false; // turn indexing off for sortedMap()
    }

    if (!(opts != null ? opts.hasOwnProperty('mask') : void 0)) {
      // true - val could be list of masks or a comma delimited mask
      optsMask = false;
    } else {
      if (typeof (optsMask = opts.mask) !== 'boolean') {
        invalidArg('opts.mask', opts.mask);
      }
    }

    _index = 0;
    name = [];
    resList = [];
    resMap = {};

    _indexLevel2 = function _indexLevel(level) {
      var i, item, len, ref, results;
      ref = level.$$list;
      results = [];

      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        name.push(item.name);
        resMap[name.length > 1 ? item.fullname = name.join('.') : item.name] = item;
        item.$$index = _index++;
        resList.push(item);

        if (item[subitemsField]) {
          _indexLevel2(item[subitemsField]);
        }

        results.push(name.pop());
      }

      return results;
    };

    _indexLevel2(resValue);

    (resValue.$$flat = resMap).$$list = resList;

    if (optsMask) {
      masks = [];

      _buildMask = function buildMask(list) {
        var i, item, j, len, len1, v;

        for (i = 0, len = list.length; i < len; i++) {
          item = list[i];

          for (j = 0, len1 = masks.length; j < len1; j++) {
            v = masks[j];
            v.set(item.$$index);
          }

          if (item.hasOwnProperty(subitemsField)) {
            masks.push(item.$$mask = new BitArray(resValue));

            _buildMask(item[subitemsField].$$list);

            masks.pop().lock(); // buildMask =
          }
        }
      };

      _buildMask(resValue.$$list); // index =

    }
  };

  finish = function finish(result, resValue, subitemsField, opts) {
    var _processSublevel2;

    if (!isResult(result)) {
      invalidArg('result', result);
    }

    if (!(_typeof(resValue) === 'object' && resValue !== null && resValue.hasOwnProperty('$$flat'))) {
      invalidArg('resValue', resValue);
    }

    if (!(typeof subitemsField === 'string' && subitemsField.length > 0)) {
      invalidArg('subitemsField', subitemsField);
    }

    if (!(opts === void 0 || _typeof(opts) === 'object' && opts !== null && !Array.isArray(opts))) {
      invalidArg('opts', opts);
    }

    _processSublevel2 = function _processSublevel(level) {
      var item;
      item = void 0;
      result.context(function (path) {
        return Result.prop(item.name)(path);
      }, function () {
        // _processSublevel =
        var i, len, ref;
        ref = level.$$list;

        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];

          if (item.hasOwnProperty(subitemsField)) {
            result.context(Result.prop(subitemsField), function () {
              var value;
              value = item[subitemsField];

              if (!(_typeof(value) === 'object' && value !== null || typeof value === 'string')) {
                result.error('dsc.invalidValue', {
                  value: value
                });
              } else {
                _processSublevel2(value);

                sortedMap.finish(result, value, opts); // result.context
                // result.context
                // _processLevel
              }
            });
          }
        }
      });
    };

    _processSublevel2(resValue);

    sortedMap.finish(result, resValue, opts); // finish =
  };

  flatMap = function flatMap(result, value, subitemsField, opts) {
    var _processLevel2;

    if (!isResult(result)) {
      invalidArg('result', result);
    }

    if (!(typeof subitemsField === 'string' && subitemsField.length > 0)) {
      invalidArg('subitemsField', subitemsField);
    }

    if (!(opts === void 0 || _typeof(opts) === 'object' && opts !== null && !Array.isArray(opts))) {
      invalidArg('opts', opts);
    }

    _processLevel2 = function _processLevel(parentItem) {
      var i, item, len, ref, ref1;
      ref = parentItem.$$list;

      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];

        if ((ref1 = item.$$src) != null ? ref1.hasOwnProperty(subitemsField) : void 0) {
          result.context(Result.prop(item.name, Result.prop(subitemsField)), function () {
            var resLevel;
            item[subitemsField] = resLevel = sortedMap(result, item.$$src[subitemsField], opts);

            if (!result.isError) {
              // result.context
              // result.context
              // _processLevel =
              _processLevel2(resLevel);
            }
          });
        }
      }
    };

    return result.context(function () {
      // flatMask
      var res;
      res = sortedMap(result, value, opts);

      if (opts && (opts.hasOwnProperty('before') || opts.hasOwnProperty('after'))) {
        opts = deepClone(opts);
        delete opts.before;
        delete opts.after;
      }

      if (!result.isError) {
        _processLevel2(res);

        if (!result.isError) {
          return res; // result.context
        }
      }
    });
  }; // ----------------------------


  module.exports = flatMap;
  flatMap.index = _index;
  flatMap.finish = finish;
  flatMap.empty = {
    $$list: [],
    $$flat: {
      $$list: []
    }
  };
}).call(void 0);
"use strict";

// Generated by CoffeeScript 2.5.1
(function () {
  var Result, processExtraProps, validateBuilder;
  Result = require('../result');
  validateBuilder = require('../validate');

  processExtraProps = function processExtraProps(result, fieldDesc, res) {
    var copyAndValidateProp, validator;
    validator = void 0;

    copyAndValidateProp = function copyAndValidateProp(prop) {
      result.context(Result.prop(prop), function () {
        var opts;
        opts = {
          result: result,
          strict: true,
          beforeAction: true
        };
        return (validator || (validator = validateBuilder(res))).call(opts, fieldDesc[prop], void 0, void 0, void 0);
      });
      return res[prop] = fieldDesc[prop];
    };

    if (~['string', 'text'].indexOf(res.type)) {
      if (fieldDesc.hasOwnProperty('regexp')) {
        (function () {
          var err, i, ok, regexp;
          regexp = fieldDesc.regexp;
          ok = false;

          if (typeof regexp === 'string') {
            if ((i = regexp.lastIndexOf('/')) > 0) {
              try {
                res.regexp = new RegExp(regexp.substr(1, i - 1), regexp.substr(i + 1));
                ok = true;
              } catch (error) {
                err = error;
                result.error(function (path) {
                  return Result.prop('regexp')(path);
                }, 'dsc.invalidRegexp', {
                  value: regexp,
                  msg: err.message
                });
              }
            }
          } else if (regexp instanceof RegExp) {
            res.regexp = regexp;
            ok = true;
          }

          if (!ok) {
            return result.error(function (path) {
              return Result.prop('regexp')(path);
            }, 'dsc.invalidValue', {
              value: regexp
            });
          }
        })();
      }

      if (fieldDesc.hasOwnProperty('min')) {
        if (!(typeof fieldDesc.min === 'number' && Number.isInteger(fieldDesc.min) && fieldDesc.min > 0)) {
          result.error(function (path) {
            return Result.prop('min')(path);
          }, 'dsc.invalidValue', {
            value: fieldDesc.min
          });
        }

        if (!(fieldDesc.type === 'text' || fieldDesc.min <= res.length)) {
          result.error(function (path) {
            return Result.prop('min')(path);
          }, 'dsc.tooBig', {
            value: fieldDesc.min
          });
        }

        res.min = fieldDesc.min;
      }
    }

    if (fieldDesc.type === 'text') {
      if (fieldDesc.hasOwnProperty('max')) {
        if (!(typeof fieldDesc.max === 'number' && Number.isInteger(fieldDesc.max) && fieldDesc.max > 0)) {
          result.error(function (path) {
            return Result.prop('max')(path);
          }, 'dsc.invalidValue', {
            value: fieldDesc.max
          });
        }

        if (res.hasOwnProperty('min') && res.min > fieldDesc.max) {
          result.error(function (path) {
            return Result.prop('max')(path);
          }, 'dsc.tooSmall', {
            value: fieldDesc.max
          });
        }

        res.max = fieldDesc.max;
      }
    } else if (~['integer', 'double', 'decimal'].indexOf(res.type)) {
      if (fieldDesc.hasOwnProperty('min')) {
        copyAndValidateProp('min');
      }

      if (fieldDesc.hasOwnProperty('max')) {
        copyAndValidateProp('max');
      } //    if res.type == 'decimal'
      //      unless res.hasOwnProperty('max')
      //        res.max = Math.pow(10, res.precision) - 1
      //      else
      //        if res.max > (Math.pow(10, res.precision) - 1)
      //          result.error ((path) -> (Result.prop 'max') path), 'dsc.tooLongForThisPrecision', value: fieldDesc.max, precision: res.precision
      //      unless res.hasOwnProperty('min')
      //        res.min = -(Math.pow(10, res.precision) - 1)
      //      else
      //        if res.min < -(Math.pow(10, res.precision) - 1)
      //          result.error ((path) -> (Result.prop 'min') path), 'dsc.tooLongForThisPrecision', value: fieldDesc.min, precision: res.precision
      //      res.min = -(Math.pow(10, res.precision) - 1) unless res.hasOwnProperty('min')


      if (!result.isError && res.hasOwnProperty('min') && res.hasOwnProperty('max') && res.min > res.max) {
        result.error(function (path) {
          return Result.prop('max')(path);
        }, 'dsc.tooSmall', {
          value: fieldDesc.max,
          min: res.min
        });
      }
    }

    validator = void 0;

    if (fieldDesc.hasOwnProperty('init') && !result.isError && !~['structure', 'subtable'].indexOf(res.type)) {
      copyAndValidateProp('init');
    }

    return res; // processExtraProps =
  }; // ----------------------------


  module.exports = processExtraProps;
}).call(void 0);
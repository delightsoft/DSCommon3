"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Generated by CoffeeScript 2.5.1
(function () {
  var Result, checkResult, combineMsg, flatTree, format, formatNoI18n, formatPart, invalidArg, link, tooManyArgs;
  Result = require('./result');

  var _require = require('./utils');

  combineMsg = _require.combineMsg;
  flatTree = _require.flatTree;
  var _require$err = _require.err;
  tooManyArgs = _require$err.tooManyArgs;
  invalidArg = _require$err.invalidArg;
  checkResult = _require$err.checkResult;

  // ----------------------------
  formatNoI18n = function formatNoI18n(message) {
    var res;
    res = "".concat(message.code).concat(JSON.stringify(message, function (name, val) {
      if (Result._reservedAttrs.indexOf(name) >= 0) {
        return void 0;
      } else {
        return val;
      }
    }));

    if (res.endsWith('{}')) {
      // no attributes, beside reservedAttrs list
      return res.substr(0, res.length - 2); // formatNoI18n =
    }

    return res; // formatNoI18n =
  }; // ----------------------------


  formatPart = function formatPart(i18nPart, message) {
    var template;

    if (typeof (template = i18nPart[message.code]) === 'function') {
      return template(message); // formatPart =
    } else if (typeof template !== 'undefined') {
      return "".concat(template);
    } else {
      return formatNoI18n(message); // formatPart =
    }
  }; // ----------------------------


  format = function format(i18n, message) {
    var res;

    if (!(typeof i18n === 'undefined' || _typeof(i18n) === 'object')) {
      invalidArg('i18n', i18n);
    }

    if (!(_typeof(message) === 'object' && message !== null && message.hasOwnProperty('code'))) {
      invalidArg('message', message);
    }

    if (!(arguments.length <= 2)) {
      tooManyArgs();
    }

    res = [];

    if (message.hasOwnProperty('path')) {
      res.push("".concat(message.path, ": "));
    }

    if (i18n) {
      res.push(formatPart(i18n, message)); // no i18n
    } else {
      res.push(formatNoI18n(message));
    }

    return res.join(''); // format =
  }; // ----------------------------


  link = function link(result, i18n) {
    checkResult(result);

    if (!(_typeof(i18n) === 'object' && i18n !== null)) {
      invalidArg('i18n', config);
    }

    if (!(arguments.length <= 2)) {
      tooManyArgs();
    }

    return flatTree(i18n); // link =
  }; // ----------------------------


  module.exports = {
    link: link,
    format: format
  };
}).call(void 0);
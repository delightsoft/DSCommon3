Описание типа документов
==============================

Описание типа документа, это всего лишь json структура, которую загружают из файла через require()

    module.exports =

Имя типа документа
------------------------------

Именем типа документа является имя файла.  После загрузки в память будет добавлено свойство name

Поля
------------------------------

Список полей документов, в предпочтительном для отображении порядке

      fields:

Имя поля - ключ в fields.  После загрузки это имя будет продублированно в свойстве name

        field1:

Тип поля, описывается аттрибутами для описания типа поля type, udttype, length, ...

          type: 'string'
          lenght: '20'

Поле может иметь теги, которые используются для работы с группами полей в state/view, state/update, а так же в системе прав

          tags: ['user', 'admin', 'tag3']

Ещё пара полей

        field2:

Используем user defined type, который будет описан в отдельном файле

          udtype: 'name'

Можно теги писать и одной строкой

          tags: 'user,admin'

        field3:

          type: 'structure'

Поля структуры, такие же поля как верхнеуровневые поля документа

          fields:
            a:
              type: 'int'
            b:
              type: 'date'

        field4:

Для ссылки на документ, пишем тип в строке

          ref: 'docSimple'

Действия
------------------------------

      actions:

Имя action - ключ в actions.  После загрузки это имя будет продублированно в свойстве name

        action1:

Внутри определяем код.  Код может быть для разных контекстов.  '' - контекст по умолчанию

          '': -> return

Код в контектсте 'server' - будет работать только на сервере

          'server': -> return

Action может быть без кода

        action2: true

Если есть, только код который должен работать везде, то можно писать кратко

        action3: -> return

Состояния
------------------------------

      states:

Имя состония - ключ в states.  После загрузки это имя будет продублированно в свойстве name

        opened:

После view и update могут быть или массивом со списком полей/тегов или строкой, со списком разделенным запятыми

          view: 'field1,field2'

При записи имен полей можно использовать выражения из тегов.  Где могут участвовать:
* <имя> - имя группы
* ! - обратная группа
* - - все поля слева, кроме полей справа
* +/, - объединение полей слева и справа
* (/) - скобки для группировки операций

          update: ['#all-#user', 'field2']

          transitions:

В отличии от DSCommon2, можно не объявлять действия, для которых нет необходимости писать код обработки.  Другими словами, то
что close используется в transitions, автоматически добавляет close в actions.

            close: 'closed'

        closed:

          view: '#all'

Если пропущем атрибут view или update, то считается что это пустой список

          transitions:

            open:

              '': 'opened'

Переход (transition) состояния может быть условным.  lock - это condition

              'lock': true

Условия (conditions)
------------------------------

      conditions:

        lock:

Для условий, которые не могут быть проверенны на месте, можно указывать значение по умолчанию.  Если не default
указано, то считается что default: false

          default: true

Метод возвращающий true/false

          fn: -> @get 'lock'

